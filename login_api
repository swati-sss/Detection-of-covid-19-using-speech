
import Foundation
import Combine
import compass_sdk_ios

class MapViewModel: ObservableObject {
    // Published properties that SwiftUI can observe
    @Published var isMapInitialized = false
    @Published var consoleMessages: [String] = []
    @Published var currentStoreID: String = "\(Environment.initialStore)"
    @Published var showConsole = false
    
    // Map configuration
    @Published var enableManualPinDrop = true
    @Published var shouldZoomOnPins = true
    @Published var resetZoom = false
    
    // Reference to the map view controller (set by SwiftUI)
    weak var mapViewController: MapHostViewController?
    
    // Error handling
    @Published var lastError: String?
    @Published var showError = false
    
    // Initialize with default store
    init() {
        currentStoreID = "\(Environment.initialStore)"
    }
    
    // Map control functions that SwiftUI buttons can call
    func initializeMap() {
        guard let storeID = Int(currentStoreID) else {
            lastError = "Invalid store ID"
            showError = true
            return
        }
        
        mapViewController?.initializeMap(for: storeID)
    }
    
    func displayAssetPins() {
        // Example implementation - you'd get these from your data
        let uuidList = ["asset1", "asset2", "asset3"]
        mapViewController?.displayPins(uuidList: uuidList, idType: .assets)
    }
    
    func displayAislePins() {
        // Example aisle pins
        let pins = [
            AislePin(
                type: "location",
                id: "123",
                location: AisleLocation(zone: "B", aisle: "5", section: "1", selected: true)
            )
        ]
        mapViewController?.displayPinsV2(pins: pins)
    }
    
    func clearMap() {
        mapViewController?.clearMap()
    }
    
    func toggleConsole() {
        showConsole.toggle()
    }
    
    func clearConsole() {
        consoleMessages.removeAll()
    }
}
