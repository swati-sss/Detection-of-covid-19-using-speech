//
//  HomeView.swift
//  Compass Sample App SwiftUI
//
import SwiftUI
import compass_sdk_ios

struct HomeView: View {
    @StateObject private var mapViewModel = MapViewModel()
    @State private var mapViewController: MapHostViewController?
    
    private let buttonTitles = [
        "Update Event",
        "Display Pin",
        "Other APIs",
        "Next Screen",
        "Re-Mount",
        "Feature Flags"
    ]
    
    private let gridColumns = Array(repeating: GridItem(.flexible(), spacing: 8), count: 3)
    
    var body: some View {
        VStack(spacing: 10) {
            // Top controls
            HStack(spacing: 8) {
                TextField("Store ID", text: $mapViewModel.currentStoreID)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                
                Button("Initialize") {
                    mapViewModel.initializeMap()
                }
                .buttonStyle(PlainButtonStyle())
                .disabled(mapViewModel.currentStoreID.isEmpty)
                
                Button("Options") {
                    // Show options menu
                    mapViewModel.toggleConsole()
                }
                .buttonStyle(PlainButtonStyle())
            }
            .frame(height: 38)
            
            // Button grid
            LazyVGrid(columns: gridColumns, spacing: 8) {
                ForEach(buttonTitles, id: \.self) { title in
                    Button(title) {
                        handleButtonTap(title)
                    }
                    .buttonStyle(PlainButtonStyle())
                    .frame(height: 38)
                }
            }
            
            // Map View
            MapContainerView(
                storeID: $mapViewModel.currentStoreID,
                isInitialized: $mapViewModel.isMapInitialized,
                consoleMessages: $mapViewModel.consoleMessages,
                enableManualPinDrop: mapViewModel.enableManualPinDrop,
                shouldZoomOnPins: mapViewModel.shouldZoomOnPins,
                resetZoom: mapViewModel.resetZoom,
                onPinDrop: { pinInfo in
                    // Handle pin drop event
                    print("Pin dropped: \(pinInfo)")
                },
                onError: { error in
                    mapViewModel.lastError = error
                    mapViewModel.showError = true
                }
            )
            .onAppear {
                // Store reference to map view controller if needed
                // This allows the view model to control the map
            }
            
            // Console View (optional, shown when toggled)
            if mapViewModel.showConsole {
                ScrollView {
                    VStack(alignment: .leading) {
                        ForEach(mapViewModel.consoleMessages, id: \.self) { message in
                            Text(message)
                                .font(.system(size: 10, design: .monospaced))
                                .foregroundColor(.gray)
                        }
                    }
                    .padding()
                }
                .frame(height: 150)
                .background(Color.black.opacity(0.1))
                .cornerRadius(8)
            }
        }
        .padding(.horizontal, 8)
        .navigationTitle("Main Map")
        .alert("Error", isPresented: $mapViewModel.showError) {
            Button("OK") { }
        } message: {
            Text(mapViewModel.lastError ?? "Unknown error")
        }
    }
    
    private func handleButtonTap(_ title: String) {
        switch title {
        case "Update Event":
            // Show update event menu
            break
        case "Display Pin":
            mapViewModel.displayAssetPins()
        case "Other APIs":
            mapViewModel.clearMap()
        case "Next Screen":
            // Navigate to next screen
            break
        case "Re-Mount":
            mapViewModel.initializeMap()
        case "Feature Flags":
            // Show feature flags
            break
        default:
            break
        }
    }
}
