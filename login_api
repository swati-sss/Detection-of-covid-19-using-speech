import UIKit
import compass_sdk_ios

class FeatureFlagViewController: UIViewController {
    
    private var featureFlags: [FeatureFlag] = []
    private weak var compass: Compass?
    
    private lazy var tableView: UITableView = {
        let table = UITableView(frame: .zero, style: .grouped)
        table.delegate = self
        table.dataSource = self
        table.register(FeatureFlagCell.self, forCellReuseIdentifier: FeatureFlagCell.identifier)
        table.translatesAutoresizingMaskIntoConstraints = false
        return table
    }()
    
    private lazy var clearAllButton: UIButton = {
        let button = PlainButton(title: "Clear All Overrides")
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(clearAllOverrides), for: .touchUpInside)
        return button
    }()
    
    init(compass: Compass?) {
        self.compass = compass
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        loadFeatureFlags()
        
        // Listen for feature flag changes
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(featureFlagsChanged),
            name: NSNotification.Name("CompassFeatureFlagsChanged"),
            object: nil
        )
    }
    
    private func setupUI() {
        view.backgroundColor = .systemBackground
        navigationItem.title = "Feature Flags"
        
        view.addSubview(tableView)
        view.addSubview(clearAllButton)
        
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: clearAllButton.topAnchor, constant: -16),
            
            clearAllButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            clearAllButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            clearAllButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -16),
            clearAllButton.heightAnchor.constraint(equalToConstant: 44)
        ])
    }
    
    private func loadFeatureFlags() {
        featureFlags = compass?.getFeatureFlags() ?? []
        tableView.reloadData()
    }
    
    @objc private func clearAllOverrides() {
        let alert = UIAlertController(
            title: "Clear All Overrides",
            message: "This will revert all feature flags to their backend values. Continue?",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel))
        alert.addAction(UIAlertAction(title: "Clear", style: .destructive) { _ in
            self.compass?.clearAllFeatureFlagOverrides()
            self.loadFeatureFlags()
        })
        
        present(alert, animated: true)
    }
    
    @objc private func featureFlagsChanged() {
        loadFeatureFlags()
    }
}

// MARK: - UITableViewDataSource
extension FeatureFlagViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return featureFlags.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(
            withIdentifier: FeatureFlagCell.identifier,
            for: indexPath
        ) as? FeatureFlagCell else {
            return UITableViewCell()
        }
        
        let flag = featureFlags[indexPath.row]
        cell.configure(with: flag) { [weak self] newValue in
            self?.updateFeatureFlag(flag: flag, value: newValue)
        }
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return "Feature Flags"
    }
    
    func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -> String? {
        return "Overridden flags are marked in blue. Toggle to change values."
    }
}

// MARK: - UITableViewDelegate
extension FeatureFlagViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 80
    }
    
    private func updateFeatureFlag(flag: FeatureFlag, value: Bool?) {
        compass?.setFeatureFlagOverride(for: flag.key, value: value)
        loadFeatureFlags()
    }
}

// MARK: - Feature Flag Cell
class FeatureFlagCell: UITableViewCell {
    static let identifier = "FeatureFlagCell"
    
    private var flag: FeatureFlag?
    private var toggleHandler: ((Bool?) -> Void)?
    
    private lazy var nameLabel: UILabel = {
        let label = UILabel()
        label.font = .systemFont(ofSize: 16, weight: .medium)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var statusLabel: UILabel = {
        let label = UILabel()
        label.font = .systemFont(ofSize: 12)
        label.textColor = .secondaryLabel
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var toggleSwitch: UISwitch = {
        let toggle = UISwitch()
        toggle.addTarget(self, action: #selector(toggleChanged), for: .valueChanged)
        toggle.translatesAutoresizingMaskIntoConstraints = false
        return toggle
    }()
    
    private lazy var revertButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("Revert", for: .normal)
        button.titleLabel?.font = .systemFont(ofSize: 14)
        button.addTarget(self, action: #selector(revertTapped), for: .touchUpInside)
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        setupUI()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    private func setupUI() {
        selectionStyle = .none
        
        contentView.addSubview(nameLabel)
        contentView.addSubview(statusLabel)
        contentView.addSubview(toggleSwitch)
        contentView.addSubview(revertButton)
        
        NSLayoutConstraint.activate([
            nameLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            nameLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 12),
            
            statusLabel.leadingAnchor.constraint(equalTo: nameLabel.leadingAnchor),
            statusLabel.topAnchor.constraint(equalTo: nameLabel.bottomAnchor, constant: 4),
            
            toggleSwitch.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),
            toggleSwitch.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
            
            revertButton.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),
            revertButton.trailingAnchor.constraint(equalTo: toggleSwitch.leadingAnchor, constant: -12)
        ])
    }
    
    func configure(with flag: FeatureFlag, toggleHandler: @escaping (Bool?) -> Void) {
        self.flag = flag
        self.toggleHandler = toggleHandler
        
        nameLabel.text = flag.name
        nameLabel.textColor = flag.isOverridden ? .systemBlue : .label
        
        let status = flag.isOverridden ? "Overridden" : "Backend"
        let backendValue = flag.backendValue ? "ON" : "OFF"
        statusLabel.text = "\(status) (Backend: \(backendValue))"
        
        toggleSwitch.isOn = flag.currentValue
        revertButton.isHidden = !flag.isOverridden
    }
    
    @objc private func toggleChanged() {
        toggleHandler?(toggleSwitch.isOn)
    }
    
    @objc private func revertTapped() {
        toggleHandler?(nil)
    }
}
