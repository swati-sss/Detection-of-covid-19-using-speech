private func pollOnce(wuId: String) {
    let pollingService = ModHealthPollingService(keychainService: KeychainService.standard)
    
    pollingCancellable = pollingService.pollTaskStatus(wuId: wuId)
        .receive(on: DispatchQueue.main)
        .sink(
            receiveCompletion: { [weak self] completion in
                if case .failure(let error) = completion {
                    self?.loadingStatus = ""
                    self?.showErrorAlert(with: "Failed to check status: \(error.localizedDescription)")
                }
            },
            receiveValue: { [weak self] apiResponse in
                guard let self = self else { return }
                
                let taskStatus = apiResponse?.payload?.taskStatus ?? "PENDING"
                
                switch taskStatus.uppercased() {
                case "COMPLETED":
                    self.loadingStatus = ""
                    // Present ScanResultView with the wuId
                    let scanResultView = ScanResultView(wuId: wuId)
                    let hostingController = UIHostingController(rootView: scanResultView)
                    hostingController.modalPresentationStyle = .fullScreen
                    
                    if let presented = UIApplication.shared.windows.first?.rootViewController?.presentedViewController {
                        presented.present(hostingController, animated: true)
                    }
                    
                case "FAILED":
                    self.loadingStatus = ""
                    self.showErrorAlert(with: "Image processing failed")
                    
                case "PENDING":
                    // Poll again after 30 seconds
                    DispatchQueue.main.asyncAfter(deadline: .now() + 30) {
                        self.pollOnce(wuId: wuId)
                    }
                    
                default:
                    self.loadingStatus = ""
                    self.showErrorAlert(with: "Unknown status: \(taskStatus)")
                }
            }
        )
}
