import SwiftUI
import LivingDesign

final class MapContainerViewController: UIViewController {
    let mapRoot: LDRootViewController
    private var hasConfiguredView = false

    init(mapRoot: LDRootViewController) {
        self.mapRoot = mapRoot
        super.init(nibName: nil, bundle: nil)
    }
    required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        rehostIfNeeded(reason: "viewWillAppear")
    }

    func rehostIfNeeded(reason: String? = nil) {
#if DEBUG
        if let reason {
            debugPrint("[MapContainerViewController] rehostIfNeeded triggered (\(reason))")
        } else {
            debugPrint("[MapContainerViewController] rehostIfNeeded triggered")
        }
#endif
        let child = mapRoot

        if let parent = child.parent, parent !== self {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }

        if child.parent !== self {
            addChild(child)
            child.didMove(toParent: self)
        }

        if child.view.superview !== view {
            guard let embeddedView = child.view else { return }
            configureEmbeddedViewIfNeeded(embeddedView)
            embeddedView.translatesAutoresizingMaskIntoConstraints = false
            view.addSubview(embeddedView)
            NSLayoutConstraint.activate([
                embeddedView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
                embeddedView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
                embeddedView.topAnchor.constraint(equalTo: view.topAnchor),
                embeddedView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
            ])
        } else if let embeddedView = child.view {
            configureEmbeddedViewIfNeeded(embeddedView)
        }
    }

    private func configureEmbeddedViewIfNeeded(_ embeddedView: UIView) {
        guard !hasConfiguredView else { return }
        if let scrollView = embeddedView.enclosingScrollView {
            scrollView.isScrollEnabled = false
            scrollView.canCancelContentTouches = true
        }
        embeddedView.clipsToBounds = true
        hasConfiguredView = true
    }
}

struct MapRootHost: UIViewControllerRepresentable {
    let viewController: LDRootViewController

    func makeUIViewController(context: Context) -> MapContainerViewController {
        MapContainerViewController(mapRoot: viewController)
    }

    func updateUIViewController(_ uiViewController: MapContainerViewController, context: Context) {
        uiViewController.rehostIfNeeded(reason: "updateUIViewController")
    }
}
