func simulateGeofenceStateChangeForTesting(_ stateString: String) {
    Log.warning("TEST MODE: Simulating geofence state change to \(stateString)")
    
    // Try to get the actual building from positioning floor
    let building: IPSBuilding
    
    if let actualBuilding = self.positioningFloor.value {
        // We have a real building from the initialization
        class BuildingWrapper: IPSBuilding {
            let id: String
            let clientBuildingId: String?
            let displayName: String
            let floors: [IPSFloor]
            let primaryFloor: IPSFloor
            
            init(floor: IPSFloor) {
                self.id = floor.buildingId ?? "unknown"
                // Get store ID from the asset service which should have it
                let storeId = String(ServiceLocator.shared.getAssetService().storeId)
                self.clientBuildingId = storeId
                self.displayName = "Store \(storeId)"
                self.primaryFloor = floor
                self.floors = [floor]
            }
        }
        building = BuildingWrapper(floor: actualBuilding)
    } else {
        // Fallback to mock building
        class TestBuilding: IPSBuilding {
            var id = "test_building"
            var clientBuildingId: String?
            var displayName = "Test Store"
            var floors: [IPSFloor] = []
            lazy var primaryFloor: IPSFloor = TestFloor()
            
            init() {
                // Get store ID from asset service
                let storeId = String(ServiceLocator.shared.getAssetService().storeId)
                self.clientBuildingId = storeId
                self.displayName = "Store \(storeId)"
            }
            
            class TestFloor: IPSFloor {
                var id = "test_floor"
                var name = "Ground Floor"
                var order = 0
                var maps: [IPSMap] = []
            }
        }
        building = TestBuilding()
    }
    
    let state: IPSBuildingGeofencingState
    switch stateString.lowercased() {
    case "inside":
        state = .inside
    case "outside":
        state = .outside
    default:
        state = .undefined
    }
    
    // This triggers the ACTUAL pipeline that Oriient would trigger
    self.geofencingStateUpdated(for: building, newState: state)
}
