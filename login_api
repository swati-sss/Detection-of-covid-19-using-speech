import SwiftUI

// MARK: - SwiftUI Bottom Sheet View
struct ReviewSectionBottomSheet: View {
    let modHealthResponse: ModHealthResponse?
    let onTryAgain: () -> Void
    let onDone: () -> Void
    @Binding var isPresented: Bool
    
    // Computed properties for easier access to counts
    private var missingCount: Int {
        modHealthResponse?.missingItems.count ?? 0
    }
    
    private var misplacedCount: Int {
        modHealthResponse?.misplacedItems.count ?? 0
    }
    
    private var unknownCount: Int {
        modHealthResponse?.unknownItems.count ?? 0
    }
    
    var body: some View {
        VStack(spacing: 0) {
            // Header with expand/collapse buttons and title
            headerView
            
            // Stats section showing counts with icons
            statsView
                .padding(.top, 16)
            
            // Divider
            Rectangle()
                .fill(Color.gray.opacity(0.3))
                .frame(height: 1)
                .padding(.top, 16)
            
            // Bottom buttons (Try Again and Done)
            buttonSection
                .padding(.top, 16)
        }
        .padding(.horizontal, 16)
        .padding(.bottom, 16)
        .background(Color.white)
        .cornerRadius(16, corners: [.topLeft, .topRight])
    }
    
    // MARK: - Header Section
    private var headerView: some View {
        HStack {
            // Expand button (chevron up)
            Button(action: {
                // Handle expand action - you can add functionality here
            }) {
                Image(systemName: "chevron.up")
                    .foregroundColor(.black)
                    .frame(width: 24, height: 24)
            }
            
            Spacer()
            
            // Title
            Text("Review section")
                .font(.system(size: 20, weight: .bold))
                .foregroundColor(.black)
            
            Spacer()
            
            // Close button
            Button(action: {
                isPresented = false
            }) {
                Image(systemName: "xmark")
                    .foregroundColor(.black)
                    .frame(width: 24, height: 24)
            }
        }
        .padding(.top, 8)
    }
    
    // MARK: - Stats Section
    private var statsView: some View {
        HStack(spacing: 20) {
            // Missing items
            statsItem(
                icon: "exclamationmark.circle.fill",
                iconColor: .red,
                text: "Missing",
                count: missingCount
            )
            
            // Misplaced items
            statsItem(
                icon: "exclamationmark.triangle.fill",
                iconColor: .yellow,
                text: "Misplaced",
                count: misplacedCount
            )
            
            // Unknown items
            statsItem(
                icon: "circle.fill",
                iconColor: .orange,
                text: "Unknown",
                count: unknownCount
            )
        }
        .frame(height: 32)
    }
    
    // Helper function to create individual stat items
    private func statsItem(icon: String, iconColor: Color, text: String, count: Int) -> some View {
        HStack(spacing: 4) {
            Image(systemName: icon)
                .foregroundColor(iconColor)
                .font(.system(size: 16))
            
            Text("\(text) (\(count))")
                .font(.system(size: 14, weight: .regular))
                .foregroundColor(.black)
        }
    }
    
    // MARK: - Button Section
    private var buttonSection: some View {
        HStack(spacing: 16) {
            // Try Again button (underlined text)
            Button(action: {
                isPresented = false
                onTryAgain()
            }) {
                Text("Try again")
                    .font(.system(size: 16, weight: .regular))
                    .foregroundColor(.black)
                    .underline()
            }
            .frame(width: 100, height: 40)
            
            // Done button (primary blue button)
            Button(action: {
                isPresented = false
                onDone()
            }) {
                Text("Done")
                    .font(.system(size: 16, weight: .bold))
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity, minHeight: 40)
                    .background(Color(red: 0/255, green: 113/255, blue: 220/255))
                    .cornerRadius(20)
            }
        }
    }
}

// MARK: - Corner Radius Extension
// This extension allows us to apply corner radius to specific corners
extension View {
    func cornerRadius(_ radius: CGFloat, corners: UIRectCorner) -> some View {
        clipShape(RoundedCorner(radius: radius, corners: corners))
    }
}

struct RoundedCorner: Shape {
    var radius: CGFloat = .infinity
    var corners: UIRectCorner = .allCorners

    func path(in rect: CGRect) -> Path {
        let path = UIBezierPath(
            roundedRect: rect,
            byRoundingCorners: corners,
            cornerRadii: CGSize(width: radius, height: radius)
        )
        return Path(path.cgPath)
    }
}



import SwiftUI

struct ContentView: View {
    @Environment(\.presentationMode) var presentationMode
    @StateObject private var viewModel = ModHealthViewModel()
    @State private var showReviewBottomSheet = false
    
    var body: some View {
        ZStack {
            Color.black.edgesIgnoringSafeArea(.all)
            
            if viewModel.isLoading {
                ProgressView()
                    .progressViewStyle(CircularProgressViewStyle(tint: .white))
            } else if let error = viewModel.error {
                Text("Error: \(error.localizedDescription)")
                    .foregroundColor(.white)
                    .padding()
            } else {
                VStack(spacing: 0) {
                    // Navigation Header
                    navigationHeader
                    
                    // Main Image Content
                    mainImageContent
                    
                    Spacer()
                }
            }
        }
        .navigationBarHidden(true)
        .onAppear {
            // Delay the bottom sheet presentation slightly to ensure smooth UI
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                showReviewBottomSheet = true
            }
        }
        // SwiftUI's built-in sheet modifier for bottom sheet presentation
        .sheet(isPresented: $showReviewBottomSheet) {
            ReviewSectionBottomSheet(
                modHealthResponse: viewModel.modHealthResponse,
                onTryAgain: {
                    // Handle try again action
                    print("Try again tapped")
                    // You can add your retry logic here
                },
                onDone: {
                    // Handle done action  
                    print("Done tapped")
                    // You can add navigation or completion logic here
                },
                isPresented: $showReviewBottomSheet
            )
            // This modifier makes the sheet appear from the bottom and allows partial coverage
            .presentationDetents([.height(200)]) // Adjust height as needed
            .presentationDragIndicator(.hidden) // Hide the drag indicator since we have custom buttons
        }
    }
    
    // MARK: - Navigation Header (unchanged)
    private var navigationHeader: some View {
        ZStack {
            // Blue background matching your app's theme
            Color(red: 0/255, green: 113/255, blue: 220/255)
                .frame(height: 56)
            
            HStack {
                // Back button
                Button(action: {
                    presentationMode.wrappedValue.dismiss()
                }) {
                    Image(systemName: "chevron.left")
                        .foregroundColor(.white)
                        .frame(width: 24, height: 24)
                }
                .padding(.leading, 16)
                
                Spacer()
                
                // Title from JSON data - using the computed property from ModHealthResponse
                Text(viewModel.modHealthResponse?.sectionTitle ?? "Loading...")
                    .font(.system(size: 16, weight: .bold))
                    .foregroundColor(.white)
                
                Spacer()
                
                // Help button
                Button(action: {
                    // Handle help action
                }) {
                    Image(systemName: "questionmark.circle")
                        .foregroundColor(.white)
                        .frame(width: 24, height: 24)
                }
                .padding(.trailing, 16)
            }
        }
    }
    
    // MARK: - Main Image Content (unchanged)
    private var mainImageContent: some View {
        GeometryReader { geometry in
            // Placeholder for the shelf image - you can replace this with AsyncImage
            Rectangle()
                .fill(Color.gray.opacity(0.3))
                .overlay(
                    VStack {
                        Text("Shelf Image")
                            .foregroundColor(.white)
                            .font(.title)
                        
                        // Display image URI from JSON data if available
                        if let imageUri = viewModel.modHealthResponse?.enhanceImageURI {
                            Text("Image: \(imageUri)")
                                .foregroundColor(.white.opacity(0.7))
                                .font(.caption)
                        }
                    }
                )
                .frame(width: geometry.size.width, height: geometry.size.height)
        }
    }
}
