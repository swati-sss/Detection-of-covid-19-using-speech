
import SwiftUI
import compass_sdk_ios

struct MapContainerView: UIViewControllerRepresentable {
    // These bindings allow SwiftUI to control the map
    @Binding var storeID: String
    @Binding var isInitialized: Bool
    @Binding var consoleMessages: [String]
    
    // Configuration options
    var enableManualPinDrop: Bool = true
    var shouldZoomOnPins: Bool = true
    var resetZoom: Bool = false
    
    // Callbacks for map actions (these let SwiftUI respond to map events)
    var onPinDrop: (([String: Any]) -> Void)?
    var onError: ((String) -> Void)?
    
    func makeUIViewController(context: Context) -> MapHostViewController {
        let mapVC = MapHostViewController()
        
        // Set initial configuration
        mapVC.enableManualPinDrop = enableManualPinDrop
        mapVC.shouldZoomOnPins = shouldZoomOnPins
        mapVC.resetZoom = resetZoom
        
        // Set delegate to coordinator for communication
        mapVC.delegate = context.coordinator
        
        return mapVC
    }
    
    func updateUIViewController(_ uiViewController: MapHostViewController, context: Context) {
        // This is called when SwiftUI state changes
        // Check if store ID changed and reinitialize if needed
        if let newStoreID = Int(storeID),
           newStoreID != uiViewController.currentStore {
            uiViewController.initializeMap(for: newStoreID)
        }
        
        // Update configuration if changed
        uiViewController.enableManualPinDrop = enableManualPinDrop
        uiViewController.shouldZoomOnPins = shouldZoomOnPins
        uiViewController.resetZoom = resetZoom
    }
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    // The Coordinator handles communication from UIKit back to SwiftUI
    class Coordinator: NSObject, MapHostViewControllerDelegate {
        var parent: MapContainerView
        
        init(_ parent: MapContainerView) {
            self.parent = parent
        }
        
        func mapDidInitialize(success: Bool) {
            DispatchQueue.main.async {
                self.parent.isInitialized = success
            }
        }
        
        func mapDidReceiveError(_ error: String) {
            DispatchQueue.main.async {
                self.parent.onError?(error)
            }
        }
        
        func consoleLogReceived(_ message: String) {
            DispatchQueue.main.async {
                // Add timestamp to message
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "hh:mm:ss.SSSS"
                let timestampedMessage = "\(dateFormatter.string(from: Date()))\n\(message)"
                self.parent.consoleMessages.append(timestampedMessage)
            }
        }
        
        func mapDidDropPin(_ pinInfo: [String : Any]) {
            DispatchQueue.main.async {
                self.parent.onPinDrop?(pinInfo)
            }
        }
    }
    
    // Public methods that SwiftUI can call to control the map
    static func displayPins(_ mapVC: MapHostViewController?, uuidList: [String], idType: PinDropMethod) {
        mapVC?.displayPins(uuidList: uuidList, idType: idType)
    }
    
    static func clearMap(_ mapVC: MapHostViewController?) {
        mapVC?.clearMap()
    }
    
    static func getUserDistance(_ mapVC: MapHostViewController?, pins: [AislePin]) {
        mapVC?.getUserDistance(pins: pins)
    }
}
