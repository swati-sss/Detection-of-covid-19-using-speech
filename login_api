struct BoundingBoxView: View {
    let item: ModHealthItem
    let color: Color
    let imageSize: CGSize
    
    var body: some View {
        if let xMinStr = item.xMin,
           let xMaxStr = item.xMax,
           let yMinStr = item.yMin,
           let yMaxStr = item.yMax,
           let xMin = Double(xMinStr),
           let xMax = Double(xMaxStr),
           let yMin = Double(yMinStr),
           let yMax = Double(yMaxStr) {
            
            // ✅ Calculate how much of the original image is actually visible
            let originalImageAspectRatio: CGFloat = 1920 / 1080  // 16:9
            let containerAspectRatio = imageSize.width / imageSize.height
            
            // With .fill, Y-axis uses full height, X-axis gets cropped
            let scaleY = imageSize.height / 1080  // Y-axis is perfect
            
            // Calculate the actual width of the original image when scaled to fit height
            let scaledOriginalWidth = 1920 * scaleY
            let visibleWidth = imageSize.width
            let cropOffsetX = (scaledOriginalWidth - visibleWidth) / 2
            
            // ✅ Adjust X coordinates for the cropped portion
            let scaleX = scaleY  // Same scale as Y since image maintains aspect ratio
            
            let adjustedXMin = (CGFloat(xMin) * scaleX) - cropOffsetX
            let adjustedXMax = (CGFloat(xMax) * scaleX) - cropOffsetX
            
            // Y coordinates don't need adjustment since they're perfect
            let boxY = CGFloat(yMin) * scaleY
            let boxHeight = CGFloat(yMax - yMin) * scaleY
            
            // Calculate final box dimensions
            let boxX = adjustedXMin
            let boxWidth = adjustedXMax - adjustedXMin
            
            Rectangle()
                .stroke(color, lineWidth: 2)
                .frame(width: boxWidth, height: boxHeight)
                .position(x: boxX + boxWidth/2, y: boxY + boxHeight/2)
        }
    }
}
