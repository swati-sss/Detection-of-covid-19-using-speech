import SwiftUI

@main
struct SampleApp: App {
    @StateObject private var bridge = HomeViewModel()

    init() {
        NotificationManager.shared.configure()
        
        let userDefaults = UserDefaults.standard
        for key in userDefaults.dictionaryRepresentation().keys {
            if key.starts(with: "FeatureFlagOverrides_") {
                userDefaults.removeObject(forKey: key)
            }
        }
        userDefaults.synchronize()
    }
    
    var body: some Scene {
        WindowGroup {
            NavigationStack {
                HomeView(bridge: bridge)
            }
#if DEBUG
            .onOpenURL { url in
                handleIncomingMapURL(url)
            }
#endif
        }
    }

#if DEBUG
    private func handleIncomingMapURL(_ url: URL) {
        guard url.isFileURL else { return }
        let ext = url.pathExtension.lowercased()
        guard ext == "html" || ext == "htm" else { return }

        let fileManager = FileManager.default
        let documentsDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first!
        let localMapsDirectory = documentsDirectory.appendingPathComponent("LocalMaps", isDirectory: true)

        do {
            try fileManager.createDirectory(at: localMapsDirectory, withIntermediateDirectories: true)
        } catch {
            print("Failed to create LocalMaps directory: \(error)")
        }

        let destinationURL = localMapsDirectory.appendingPathComponent(url.lastPathComponent)

        var shouldStopAccessing = false
        if url.startAccessingSecurityScopedResource() {
            shouldStopAccessing = true
        }
        defer {
            if shouldStopAccessing {
                url.stopAccessingSecurityScopedResource()
            }
        }

        do {
            if fileManager.fileExists(atPath: destinationURL.path) {
                try fileManager.removeItem(at: destinationURL)
            }
            try fileManager.copyItem(at: url, to: destinationURL)
            DispatchQueue.main.async {
                bridge.setLocalMapOverride(destinationURL)
            }
        } catch {
            print("Failed to import local map HTML: \(error)")
        }
    }
#endif
}
