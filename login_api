import SwiftUI
import compass_sdk_ios

struct EnvironmentSettingsView: View {
    @ObservedObject var bridge: HomeViewModel

    @State private var selectedBackend: CompassEnvironment = Environment.backendEnv
    @State private var selectedTokenType: TokenType = Environment.tokenType
    @State private var mockUserEnabled: Bool = Environment.mockUser
    @State private var accountIdText: String = Environment.accountID
    @State private var initialStoreText: String = String(Environment.initialStore)

    @Environment(\.dismiss) private var dismiss

    private let backendOptions: [CompassEnvironment] = [.staging, .production, .perf, .preProd, .stageGKE]
    private let tokenOptions: [TokenType] = [.User, .IAM, .Pingfed]

    var body: some View {
        NavigationView {
            Form {
                Section("Backend") {
                    Picker("Environment", selection: $selectedBackend) {
                        ForEach(backendOptions, id: \.self) { option in
                            Text(displayName(for: option)).tag(option)
                        }
                    }
                    .pickerStyle(.menu)
                }

                Section("Authentication") {
                    Picker("Token Type", selection: $selectedTokenType) {
                        ForEach(tokenOptions, id: \.self) { option in
                            Text(displayName(for: option)).tag(option)
                        }
                    }
                    .pickerStyle(.menu)

                    Toggle("Mock User", isOn: $mockUserEnabled)

                    TextField("Account ID", text: $accountIdText)
                        .textInputAutocapitalization(.never)
                        .disableAutocorrection(true)
                }

                Section("Store Settings", footer: Text("Applying changes will re-initialize the Compass SDK if it is currently running.")) {
                    TextField("Initial Store", text: $initialStoreText)
                        .keyboardType(.numberPad)
                }
            }
            .navigationTitle("Environment")
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Apply") {
                        applyChanges()
                    }
                    .fontWeight(.bold)
                    .disabled(!canApply)
                }
            }
            .onAppear {
                loadDefaults()
            }
        }
    }

    private var canApply: Bool {
        !accountIdText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
    }

    private func loadDefaults() {
        selectedBackend = Environment.backendEnv
        selectedTokenType = Environment.tokenType
        mockUserEnabled = Environment.mockUser
        accountIdText = Environment.accountID
        initialStoreText = String(Environment.initialStore)
    }

    private func applyChanges() {
        Environment.backendEnv = selectedBackend
        Environment.tokenType = selectedTokenType
        Environment.mockUser = mockUserEnabled
        Environment.accountID = accountIdText.trimmingCharacters(in: .whitespacesAndNewlines)

        if let storeValue = Int(initialStoreText.trimmingCharacters(in: .whitespacesAndNewlines)) {
            Environment.initialStore = storeValue
        }

        bridge.applyEnvironmentChangesAndReinitializeIfNeeded()
        dismiss()
    }

    private func displayName(for environment: CompassEnvironment) -> String {
        switch environment {
        case .staging: return "Staging"
        case .production: return "Production"
        case .perf: return "Perf"
        case .preProd: return "Pre-Prod"
        case .stageGKE: return "Stage GKE"
        @unknown default:
            return environment.rawValue.capitalized
        }
    }

    private func displayName(for tokenType: TokenType) -> String {
        switch tokenType {
        case .User: return "User"
        case .IAM: return "IAM"
        case .Pingfed: return "PingFed"
        }
    }
}
