
public func simulateGeofenceChangeForTesting(_ state: String) {
    #if DEBUG
    Log.warning("TESTING ONLY: Simulating geofence state change to: \(state)")
    
    // Get the indoor positioning service
    let indoorService = serviceLocator.getIndoorPositioningService()
    
    // We need to trigger the geofencingStateUpdated method
    // Since we can't directly call it from here, we'll do it through the StatusService
    // But first, let's add a proper test method
    
    // Cast to the implementation to access the test method
    if let indoorServiceImpl = indoorService as? IndoorPositioningServiceImpl {
        indoorServiceImpl.simulateGeofenceStateChangeForTesting(state)
    }
    #endif
}




/// Test method - only call this for testing
func simulateGeofenceStateChangeForTesting(_ stateString: String) {
    Log.warning("TEST MODE: Simulating geofence state change to \(stateString)")
    
    // Create a mock building since we might not have a real one
    struct TestBuilding: IPSBuilding {
        var id = "test_building"
        var clientBuildingId: String? = "test_store"
        var displayName = "Test Store"
        var floors: [IPSFloor] = []
        var primaryFloor: IPSFloor {
            TestFloor()
        }
        
        struct TestFloor: IPSFloor {
            var id = "test_floor"
            var name = "Ground Floor"
            var order = 0
            var maps: [IPSMap] = []
        }
    }
    
    let testBuilding = TestBuilding()
    let state: IPSBuildingGeofencingState
    
    switch stateString.lowercased() {
    case "inside":
        state = .inside
    case "outside":
        state = .outside
    default:
        state = .undefined
    }
    
    // Call the actual method that Oriient would call
    self.geofencingStateUpdated(for: testBuilding, newState: state)
}


