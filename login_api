// Add this new method to handle the toggle
private func toggleLocalMapConfig() {
    // Toggle the flag
    useLocalMapConfig.toggle()
    
    // Save to UserDefaults so StoreMapView can read it
    UserDefaults.standard.set(useLocalMapConfig, forKey: "useLocalMapConfig")
    UserDefaults.standard.synchronize()
    
    // Update the menu to reflect the new state
    if let otherAPIsButton = getOtherAPIsButton() {
        setOtherAPIsButtonMenu(otherAPIsButton)
    }
    
    // Handle the map loading based on toggle state
    if useLocalMapConfig {
        // When enabling local config, set store to 2119 and initialize
        storeID.text = "2119"
        
        // Show confirmation and then load the local map
        let alert = UIAlertController(
            title: "Map Configuration",
            message: "Local map config ENABLED\nLoading store 2119 from local bundle\n(Store number changes won't work)",
            preferredStyle: .alert
        )
        alert.addAction(UIAlertAction(title: "OK", style: .default) { _ in
            // Initialize with store 2119 to load the local config
            self.initialize(false)
        })
        present(alert, animated: true)
    } else {
        // When disabling local config, we can optionally reload the current store
        // or let the user keep whatever store is currently in the field
        let currentStore = storeID.text ?? "\(Environment.initialStore)"
        
        let alert = UIAlertController(
            title: "Map Configuration",
            message: "Local map config DISABLED\nStore number changes will now work\nCurrent store: \(currentStore)",
            preferredStyle: .alert
        )
        alert.addAction(UIAlertAction(title: "Reload Current Store", style: .default) { _ in
            // Reload with the current store number to ensure remote loading
            self.initialize(false)
        })
        alert.addAction(UIAlertAction(title: "Keep Current Map", style: .cancel))
        present(alert, animated: true)
    }
}
