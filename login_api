

@_implementationOnly import LivingDesign
@_implementationOnly import Bogle
import SwiftUI

struct ReviewSectionBottomSheet: View {
    
    // Use the NEW API model directly
    let modHealthResponse: ModHealthResponseData?
    let onTryAgain: () -> Void
    let onDone: () -> Void
    
    @Binding var isVisible: Bool
    @Binding var isExpanded: Bool
    
    let screenHeight: CGFloat

    let fullHeight: CGFloat = 800
    let partialHeight: CGFloat = 200

    var currentOffset: CGFloat {
        if !isVisible {
            return screenHeight
        } else if isExpanded {
            return screenHeight - fullHeight + 35
        } else {
            return screenHeight - partialHeight
        }
    }
    
    var body: some View {
        VStack(spacing: 0) {
            HStack {
                Button(action: {
                    withAnimation(.spring()) {
                        isExpanded.toggle()
                    }
                }) {
                    Image(systemName: isExpanded ? "chevron.down" : "chevron.up")
                        .font(.system(size: 19))
                        .padding(.leading)
                }
                
                Spacer()
                
                Text("Review Section")
                    .font(Font(UIFont.bogle(ofSize: 19, weight: .bold)))
                    .lineLimit(1)
                
                Spacer()
                
                Button(action: {
                    withAnimation(.spring()) {
                        isVisible = false
                    }
                }) {
                    Image(systemName: "xmark")
                        .font(.system(size: 19))
                        .padding(.trailing)
                }
            }
            .foregroundStyle(.black)
            .padding(.top, 15)
            .padding(.horizontal, 5)
            
            HStack(spacing: 11) {
                HStack(spacing: 5) {
                    Image(systemName: "exclamationmark.circle.fill")
                        .foregroundColor(.red)
                        .font(.system(size: 16))
                    Text("Missing (\(modHealthResponse?.missingItems.count ?? 0))")
                }
                HStack(spacing: 5){
                    Image(systemName: "exclamationmark.triangle.fill")
                        .foregroundColor(.yellow)
                        .font(.system(size: 16))
                    Text("Misplaced (\(modHealthResponse?.misplacedItems.count ?? 0))")
                }
                HStack(spacing: 5){
                    Image(systemName: "circle.fill")
                        .foregroundColor(.orange)
                        .font(.system(size: 16))
                    Text("Unknown (\(modHealthResponse?.unknownItems.count ?? 0))")
                }
            }
            .font(Font(UIFont.bogle(ofSize: 17, weight: .bold)))
            .padding(.vertical)
            
            Divider()
            
            if isExpanded {
                HStack {
                    Text("Filter By")
                        .font(Font(UIFont.bogle(ofSize: 17, weight: .bold)))
                        .padding(.top)
                        .padding(.leading)
                    Spacer()
                }
                ExpandableListView(modHealthResponse: modHealthResponse)
                Divider()
            }
            
            HStack(spacing: 16) {
                Button(action: {
                    isVisible = false
                    onTryAgain()
                }) {
                    Text("Try again")
                        .font(.system(size: 16, weight: .regular))
                        .foregroundColor(.black)
                        .underline()
                }
                .frame(width: 100, height: 40)
                
                Button(action: {
                    isVisible = false
                    onDone()
                }) {
                    Text("Done")
                        .font(.system(size: 16, weight: .bold))
                        .foregroundColor(.white)
                        .frame(maxWidth: .infinity, minHeight: 40)
                        .background(Color(red: 0/255, green: 113/255, blue: 220/255))
                        .cornerRadius(20)
                }
            }
            .padding(25)
            
            Spacer()
        }
        .frame(height: fullHeight)
        .frame(maxWidth: .infinity)
        .background(Color(.white))
        .cornerRadius(20)
        .shadow(radius: 5)
        .offset(y: currentOffset)
        .animation(.easeInOut, value: isExpanded)
        .animation(.easeInOut, value: isVisible)
    }
}

struct ExpandableItem: Identifiable {
    let id = UUID()
    let title: String
    var isChecked: Bool = false
    var isExpanded: Bool = false
    var items: [ModHealthItem]  // Use NEW API model directly
}

struct ExpandableListView: View {
    
    @State private var items: [ExpandableItem] = []
    let modHealthResponse: ModHealthResponseData?  // Use NEW API model directly
    
    var body: some View {
        List {
            ForEach(items.indices, id: \.self) { index in
                VStack(alignment: .leading, spacing: 8) {
                    HStack {
                        Button(action: {
                            items[index].isChecked.toggle()
                            items[index].isExpanded = items[index].isChecked
                        }) {
                            Image(systemName: items[index].isChecked ? "checkmark.square.fill" : "square")
                        }

                        Text(items[index].title)
                            .font(Font(UIFont.bogle(ofSize: 17, weight: .bold)))

                        Spacer()
                    }

                    if items[index].isExpanded {
                        ForEach(items[index].items.indices, id: \.self) { itemIndex in
                            let item = items[index].items[itemIndex]
                            
                            VStack(alignment: .leading, spacing: 12) {
                                Text(item.name)
                                    .font(Font(UIFont.bogle(ofSize: 14, weight: .bold)))
                                    .foregroundColor(.black)
                                
                                HStack() {
                                    Text("UPC:")
                                        .font(.caption)
                                        .foregroundColor(.gray)
                                    Text(item.upc)  // API returns string, use directly
                                        .font(.caption)
                                        .fontWeight(.medium)
                                }
                                
                                HStack() {
                                    Text("Expected:")
                                        .font(.caption)
                                        .foregroundColor(.gray)
                                    Text("Position \(item.position)")
                                        .font(.caption)
                                        .fontWeight(.medium)
                                }
                            }
                            .padding(.vertical, 8)
                            .transition(.opacity.combined(with: .slide))
                        }
                    }
                }
                .padding(.vertical, 8)
            }
        }
        .listStyle(.plain)
        .onAppear {
            setupExpandableItems()
        }
    }
    
    private func setupExpandableItems() {
        guard let response = modHealthResponse else { return }
        
        items = [
            ExpandableItem(title: "Missing Items (\(response.missingItems.count))", items: response.missingItems),
            ExpandableItem(title: "Misplaced Items (\(response.misplacedItems.count))", items: response.misplacedItems),
            ExpandableItem(title: "Unknown Items (\(response.unknownItems.count))", items: response.unknownItems),
            ExpandableItem(title: "Correct Items (\(response.correctItems.count))", items: response.correctItems)
        ]
    }
}
