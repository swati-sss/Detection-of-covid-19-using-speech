
import Foundation
import Combine

protocol ModHealthPollingServiceType {
    func pollTaskStatus(wuId: String) -> AnyPublisher<ModHealthResponseData?, Error>
    // For future use - continuous polling
    // func startContinuousPolling(wuId: String, interval: TimeInterval) -> AnyPublisher<ModHealthResponseData?, Error>
}

class ModHealthPollingService: ModHealthPollingServiceType {
    private let keychainService: KeychainServiceType
    
    init(keychainService: KeychainServiceType) {
        self.keychainService = keychainService
    }
    
    func pollTaskStatus(wuId: String) -> AnyPublisher<ModHealthResponseData?, Error> {
        guard let urlString = buildPollingURL(wuId: wuId) else {
            return Fail(error: URLError(.badURL)).eraseToAnyPublisher()
        }
        
        let headers = APIHelper.getStandardRequestHeaders(keychainService: keychainService)
        
        Log.info("=== MOD-HEALTH POLLING REQUEST ===")
        Log.info("URL: \(urlString)")
        Log.info("WUID: \(wuId)")
        Log.info("=== END REQUEST INFO ===")
        
        return URLSessionRequest<ModHealthAPIResponse>(
            urlString: urlString,
            method: .get,
            headers: headers,
            urlSession: URLSession.shared
        )
        .execute()
        .map { apiResponse -> ModHealthResponseData? in
            Log.info("=== MOD-HEALTH POLLING RESPONSE ===")
            Log.info("Status: \(apiResponse?.status ?? "nil")")
            Log.info("Errors: \(apiResponse?.errors ?? [])")
            
            if let data = apiResponse?.payload.data.first {
                Log.info("Data received for section: \(data.sectionTitle)")
                Log.info("Missing items: \(data.missingItems.count)")
                Log.info("Misplaced items: \(data.misplacedItems.count)")
                Log.info("Unknown items: \(data.unknownItems.count)")
                Log.info("Correct items: \(data.correctItems.count)")
                
                if let errors = data.errors, !errors.isEmpty {
                    Log.warning("Data level errors: \(errors)")
                }
            }
            Log.info("=== END POLLING RESPONSE ===")
            
            return apiResponse?.payload.data.first
        }
        .eraseToAnyPublisher()
    }
    
    // MARK: - Future Implementation (commented out for now)
    /*
    func startContinuousPolling(wuId: String, interval: TimeInterval = 30.0) -> AnyPublisher<ModHealthResponseData?, Error> {
        return Timer.publish(every: interval, on: .main, in: .common)
            .autoconnect()
            .flatMap { _ in
                self.pollTaskStatus(wuId: wuId)
            }
            .eraseToAnyPublisher()
    }
    */
    
    private func buildPollingURL(wuId: String) -> String? {
        let baseURL = "https://developer.api.us.stg.walmart.com/api-proxy/service/COMPASS/SERVICE/v4/mod-health/task/status"
        var components = URLComponents(string: baseURL)
        components?.queryItems = [URLQueryItem(name: "wuId", value: wuId)]
        return components?.url?.absoluteString
    }
}
