import UIKit
@_implementationOnly import LivingDesign
@_implementationOnly import Bogle

final class ReviewSectionBottomSheet: LDRootViewController {
    weak var bottomSheetableActionDelegate: LDBottomSheetableActionDelegate?
    
    struct Model {
        let title = "Review section"
        let missingCount: Int
        let misplacedCount: Int
        let unknownCount: Int
        let correctCount: Int
        let tryAgainText = "Try again"
        let doneButtonText = "Done"
        let filterByText = "Filter By"
        
        init(missingCount: Int = 0, misplacedCount: Int = 0, unknownCount: Int = 0, correctCount: Int = 0) {
            self.missingCount = missingCount
            self.misplacedCount = misplacedCount
            self.unknownCount = unknownCount
            self.correctCount = correctCount
        }
    }
    
    var model: Model {
        didSet {
            applyModel()
        }
    }
    
    // State
    @Published private var isExpanded = false
    @Published private var filterStates = [
        "missing": false,
        "misplaced": false,
        "unknown": false,
        "correct": false
    ]
    
    // UI Elements
    private let expandButton = UIButton()
    private let collapseButton = UIButton()
    private let titleLabel = LDLabel(style: .headingMedium)
    private let statsContainer = UIView()
    private let statsLabel = UILabel()
    private let divider = LDDivider(style: .horizontal)
    private let buttonStackView = UIStackView()
    private let tryAgainButton = UIButton()
    private let doneButton = LDButton(variant: .primary, size: .large)
    
    // Expanded state UI elements
    private let filterContainer = UIView()
    private let filterByLabel = LDLabel(style: .bodyMedium)
    private let filterStackView = UIStackView()
    
    // Filter item views
    private let missingFilterItem = FilterItemView()
    private let misplacedFilterItem = FilterItemView()
    private let unknownFilterItem = FilterItemView()
    private let correctFilterItem = FilterItemView()
    
    // Callbacks
    private let onTryAgain: () -> Void
    private let onDone: () -> Void
    
    init(model: Model, onTryAgain: @escaping () -> Void, onDone: @escaping () -> Void) {
        self.model = model
        self.onTryAgain = onTryAgain
        self.onDone = onDone
        super.init(nibName: nil, bundle: nil)
        applyModel()
    }
    
    override func constructView() {
        super.constructView()
        
        expandButton.addTarget(self, action: #selector(handleExpandTapped), for: .primaryActionTriggered)
        collapseButton.addTarget(self, action: #selector(handleCollapseTapped), for: .primaryActionTriggered)
        tryAgainButton.addTarget(self, action: #selector(handleTryAgainTapped), for: .primaryActionTriggered)
        doneButton.addTarget(self, action: #selector(handleDoneTapped), for: .primaryActionTriggered)
        
        // Configure button stack view
        buttonStackView.axis = .horizontal
        buttonStackView.spacing = LDSpacing.space16
        buttonStackView.distribution = .fill
        buttonStackView.alignment = .fill
        
        // Configure filter stack view
        filterStackView.axis = .vertical
        filterStackView.spacing = LDSpacing.space12
        filterStackView.distribution = .fill
        filterStackView.alignment = .fill
        
        // Initially hide filter container
        filterContainer.isHidden = true
        filterContainer.alpha = 0
        
        // Setup filter item callbacks
        setupFilterItemCallbacks()
    }
    
    override func constructSubviewHierarchy() {
        super.constructSubviewHierarchy()
        
        view.addAutoLayoutSubview(expandButton)
        view.addAutoLayoutSubview(collapseButton)
        view.addAutoLayoutSubview(titleLabel)
        view.addAutoLayoutSubview(statsContainer)
        statsContainer.addAutoLayoutSubview(statsLabel)
        
        // Filter container
        view.addAutoLayoutSubview(filterContainer)
        filterContainer.addAutoLayoutSubview(filterByLabel)
        filterContainer.addAutoLayoutSubview(filterStackView)
        
        filterStackView.addArrangedSubview(missingFilterItem)
        filterStackView.addArrangedSubview(misplacedFilterItem)
        filterStackView.addArrangedSubview(unknownFilterItem)
        filterStackView.addArrangedSubview(correctFilterItem)
        
        view.addAutoLayoutSubview(divider)
        view.addAutoLayoutSubview(buttonStackView)
        buttonStackView.addArrangedSubview(tryAgainButton)
        buttonStackView.addArrangedSubview(doneButton)
    }
    
    override func constructSubviewLayoutConstraints() {
        super.constructSubviewLayoutConstraints()
        
        NSLayoutConstraint.activate([
            // Expand/Collapse buttons
            expandButton.topAnchor.constraint(equalTo: view.topAnchor, constant: LDSpacing.space8),
            expandButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: LDSpacing.space16),
            expandButton.widthAnchor.constraint(equalToConstant: LDSpacing.space24),
            expandButton.heightAnchor.constraint(equalToConstant: LDSpacing.space24),
            
            collapseButton.topAnchor.constraint(equalTo: view.topAnchor, constant: LDSpacing.space8),
            collapseButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -LDSpacing.space16),
            collapseButton.widthAnchor.constraint(equalToConstant: LDSpacing.space24),
            collapseButton.heightAnchor.constraint(equalToConstant: LDSpacing.space24),
            
            // Title
            titleLabel.topAnchor.constraint(equalTo: view.topAnchor, constant: LDSpacing.space8),
            titleLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            
            // Stats container
            statsContainer.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: LDSpacing.space16),
            statsContainer.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: LDSpacing.space16),
            statsContainer.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -LDSpacing.space16),
            statsContainer.heightAnchor.constraint(equalToConstant: LDSpacing.space32),
            
            statsLabel.centerXAnchor.constraint(equalTo: statsContainer.centerXAnchor),
            statsLabel.centerYAnchor.constraint(equalTo: statsContainer.centerYAnchor),
            
            // Filter container
            filterContainer.topAnchor.constraint(equalTo: statsContainer.bottomAnchor, constant: LDSpacing.space16),
            filterContainer.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: LDSpacing.space16),
            filterContainer.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -LDSpacing.space16),
            
            filterByLabel.topAnchor.constraint(equalTo: filterContainer.topAnchor),
            filterByLabel.leadingAnchor.constraint(equalTo: filterContainer.leadingAnchor),
            filterByLabel.heightAnchor.constraint(equalToConstant: LDSpacing.space24),
            
            filterStackView.topAnchor.constraint(equalTo: filterByLabel.bottomAnchor, constant: LDSpacing.space12),
            filterStackView.leadingAnchor.constraint(equalTo: filterContainer.leadingAnchor),
            filterStackView.trailingAnchor.constraint(equalTo: filterContainer.trailingAnchor),
            filterStackView.bottomAnchor.constraint(equalTo: filterContainer.bottomAnchor),
            
            // Divider
            divider.topAnchor.constraint(equalTo: filterContainer.bottomAnchor, constant: LDSpacing.space16),
            divider.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            divider.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            divider.heightAnchor.constraint(equalToConstant: 1),
            
            // Button stack
            buttonStackView.topAnchor.constraint(equalTo: divider.bottomAnchor, constant: LDSpacing.space16),
            buttonStackView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: LDSpacing.space16),
            buttonStackView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -LDSpacing.space16),
            buttonStackView.heightAnchor.constraint(equalToConstant: LDSpacing.space40),
            buttonStackView.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -LDSpacing.space16),
            
            // Button widths
            tryAgainButton.widthAnchor.constraint(equalToConstant: 100),
            doneButton.widthAnchor.constraint(greaterThanOrEqualToConstant: 200)
        ])
        
        // Update divider constraint when not expanded
        updateDividerConstraint()
    }
    
    private func updateDividerConstraint() {
        divider.removeFromSuperview()
        view.addSubview(divider)
        divider.translatesAutoresizingMaskIntoConstraints = false
        
        if isExpanded {
            NSLayoutConstraint.activate([
                divider.topAnchor.constraint(equalTo: filterContainer.bottomAnchor, constant: LDSpacing.space16),
                divider.leadingAnchor.constraint(equalTo: view.leadingAnchor),
                divider.trailingAnchor.constraint(equalTo: view.trailingAnchor),
                divider.heightAnchor.constraint(equalToConstant: 1)
            ])
        } else {
            NSLayoutConstraint.activate([
                divider.topAnchor.constraint(equalTo: statsContainer.bottomAnchor, constant: LDSpacing.space16),
                divider.leadingAnchor.constraint(equalTo: view.leadingAnchor),
                divider.trailingAnchor.constraint(equalTo: view.trailingAnchor),
                divider.heightAnchor.constraint(equalToConstant: 1)
            ])
        }
    }
    
    private func setupFilterItemCallbacks() {
        missingFilterItem.onToggle = { [weak self] isChecked in
            self?.filterStates["missing"] = isChecked
        }
        
        misplacedFilterItem.onToggle = { [weak self] isChecked in
            self?.filterStates["misplaced"] = isChecked
        }
        
        unknownFilterItem.onToggle = { [weak self] isChecked in
            self?.filterStates["unknown"] = isChecked
        }
        
        correctFilterItem.onToggle = { [weak self] isChecked in
            self?.filterStates["correct"] = isChecked
        }
    }
    
    private func applyModel() {
        // Expand/Collapse buttons
        expandButton.setImage(LDIcon.chevronDown.image, for: .normal)
        collapseButton.setImage(LDIcon.close.image, for: .normal)
        
        // Title
        titleLabel.font = UIFont.bogle(ofSize: LDSpacing.space20, weight: .bold)
        titleLabel.textAlignment = .center
        titleLabel.text = model.title
        
        // Stats
        let attributedString = NSMutableAttributedString()
        
        // Missing
        let missingAttachment = NSTextAttachment()
        missingAttachment.image = UIImage(systemName: "exclamationmark.circle.fill")?.withTintColor(.red, renderingMode: .alwaysOriginal)
        missingAttachment.bounds = CGRect(x: 0, y: -2, width: 16, height: 16)
        attributedString.append(NSAttributedString(attachment: missingAttachment))
        attributedString.append(NSAttributedString(string: " Missing (\(model.missingCount))  ", attributes: [
            .font: UIFont.bogle(ofSize: 14, weight: .regular),
            .foregroundColor: UIColor.black
        ]))
        
        // Misplaced
        let misplacedAttachment = NSTextAttachment()
        misplacedAttachment.image = UIImage(systemName: "exclamationmark.triangle.fill")?.withTintColor(.systemYellow, renderingMode: .alwaysOriginal)
        misplacedAttachment.bounds = CGRect(x: 0, y: -2, width: 16, height: 16)
        attributedString.append(NSAttributedString(attachment: misplacedAttachment))
        attributedString.append(NSAttributedString(string: " Misplaced (\(model.misplacedCount))  ", attributes: [
            .font: UIFont.bogle(ofSize: 14, weight: .regular),
            .foregroundColor: UIColor.black
        ]))
        
        // Unknown
        let unknownAttachment = NSTextAttachment()
        unknownAttachment.image = UIImage(systemName: "circle.fill")?.withTintColor(.orange, renderingMode: .alwaysOriginal)
        unknownAttachment.bounds = CGRect(x: 0, y: -2, width: 16, height: 16)
        attributedString.append(NSAttributedString(attachment: unknownAttachment))
        attributedString.append(NSAttributedString(string: " Unknown (\(model.unknownCount))", attributes: [
            .font: UIFont.bogle(ofSize: 14, weight: .regular),
            .foregroundColor: UIColor.black
        ]))
        
        statsLabel.attributedText = attributedString
        
        // Filter By label
        filterByLabel.text = model.filterByText
        filterByLabel.font = UIFont.bogle(ofSize: 14, weight: .regular)
        filterByLabel.textColor = UIColor.gray
        
        // Configure filter items
        missingFilterItem.configure(title: "Missing items (\(model.missingCount))")
        misplacedFilterItem.configure(title: "Misplaced items (\(model.misplacedCount))")
        unknownFilterItem.configure(title: "Unknown items (\(model.unknownCount))")
        correctFilterItem.configure(title: "Correct items (\(model.correctCount))")
        
        // Try again button
        let tryAgainAttributes: [NSAttributedString.Key: Any] = [
            .font: UIFont.bogle(ofSize: LDSpacing.space16, weight: .regular),
            .foregroundColor: UIColor.black,
            .underlineStyle: NSUnderlineStyle.single.rawValue
        ]
        tryAgainButton.setAttributedTitle(NSAttributedString(string: model.tryAgainText, attributes: tryAgainAttributes), for: .normal)
        
        // Done button
        doneButton.dataModel = LDButton.Model(
            variant: .primary,
            size: .large,
            text: model.doneButtonText
        )
    }
    
    @objc private func handleExpandTapped() {
        isExpanded = true
        
        // Update expand button to up chevron
        expandButton.setImage(LDIcon.chevronUp.image, for: .normal)
        
        // Show filter container with animation
        filterContainer.isHidden = false
        UIView.animate(withDuration: 0.3) { [weak self] in
            self?.filterContainer.alpha = 1
            self?.updateDividerConstraint()
            self?.view.layoutIfNeeded()
        }
        
        // Notify delegate to update tier height if needed
        if let bottomSheetable = self as? LDBottomSheetable {
            bottomSheetableActionDelegate?.bottomSheetable(bottomSheetable, didUpdateHeight: 400)
        }
    }
    
    @objc private func handleCollapseTapped() {
        self.dismiss(animated: true)
    }
    
    @objc private func handleTryAgainTapped() {
        self.dismiss(animated: true) {
            self.onTryAgain()
        }
    }
    
    @objc private func handleDoneTapped() {
        self.dismiss(animated: true) {
            self.onDone()
        }
    }
}

// MARK: - LDBottomSheetable
extension ReviewSectionBottomSheet: LDBottomSheetable {
    var contentView: UIView { view }
    var tiersType: LDBottomSheetTierType { 
        isExpanded ? .oneHeight(400) : .oneHeight(237)
    }
    var isDismissable: Bool { true }
    var shouldHideGrabber: Bool { true }
    var shouldIgnoreTabBar: Bool { true }
}

// MARK: - FilterItemView
class FilterItemView: UIView {
    private let checkbox = UIButton()
    private let titleLabel = UILabel()
    private var isChecked = false
    
    var onToggle: ((Bool) -> Void)?
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupView()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    private func setupView() {
        // Configure checkbox
        checkbox.setImage(UIImage(systemName: "square"), for: .normal)
        checkbox.setImage(UIImage(systemName: "checkmark.square.fill"), for: .selected)
        checkbox.tintColor = .black
        checkbox.addTarget(self, action: #selector(checkboxTapped), for: .touchUpInside)
        
        // Configure title label
        titleLabel.font = UIFont.bogle(ofSize: 14, weight: .regular)
        titleLabel.textColor = .black
        
        // Add subviews
        addSubview(checkbox)
        addSubview(titleLabel)
        
        // Setup constraints
        checkbox.translatesAutoresizingMaskIntoConstraints = false
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            checkbox.leadingAnchor.constraint(equalTo: leadingAnchor),
            checkbox.centerYAnchor.constraint(equalTo: centerYAnchor),
            checkbox.widthAnchor.constraint(equalToConstant: 24),
            checkbox.heightAnchor.constraint(equalToConstant: 24),
            
            titleLabel.leadingAnchor.constraint(equalTo: checkbox.trailingAnchor, constant: 12),
            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor),
            titleLabel.centerYAnchor.constraint(equalTo: centerYAnchor),
            
            heightAnchor.constraint(equalToConstant: 30)
        ])
    }
    
    func configure(title: String) {
        titleLabel.text = title
    }
    
    @objc private func checkboxTapped() {
        isChecked.toggle()
        checkbox.isSelected = isChecked
        onToggle?(isChecked)
    }
}






struct ReviewSectionBottomSheetPresenter: UIViewControllerRepresentable {
    @Binding var isPresented: Bool
    let modHealthResponse: ModHealthResponse?
    let onTryAgain: () -> Void
    let onDone: () -> Void
    
    func makeUIViewController(context: Context) -> UIViewController {
        let viewController = UIViewController()
        viewController.view.backgroundColor = .clear
        return viewController
    }
    
    func updateUIViewController(_ uiViewController: UIViewController, context: Context) {
        if isPresented && uiViewController.presentedViewController == nil {
            let model = ReviewSectionBottomSheet.Model(
                missingCount: modHealthResponse?.missingItems.count ?? 0,
                misplacedCount: modHealthResponse?.misplacedItems.count ?? 0,
                unknownCount: modHealthResponse?.unknownItems.count ?? 0,
                correctCount: modHealthResponse?.correctItems.count ?? 0
            )
            
            let bottomSheet = ReviewSectionBottomSheet(
                model: model,
                onTryAgain: {
                    isPresented = false
                    onTryAgain()
                },
                onDone: {
                    isPresented = false
                    onDone()
                }
            )
            
            if let navigationController = uiViewController.navigationController {
                navigationController.presentBottomSheet(bottomSheet, as: .modal)
            } else {
                uiViewController.presentBottomSheet(bottomSheet, as: .modal)
            }
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                if let presented = uiViewController.presentedViewController {
                    presented.presentationController?.delegate = context.coordinator
                }
            }
        }
    }
    
    func makeCoordinator() -> Coordinator {
        Coordinator(isPresented: $isPresented)
    }
    
    class Coordinator: NSObject, UIAdaptivePresentationControllerDelegate {
        @Binding var isPresented: Bool
        
        init(isPresented: Binding<Bool>) {
            _isPresented = isPresented
        }
        
        func presentationControllerDidDismiss(_ presentationController: UIPresentationController) {
            isPresented = false
        }
    }
}
