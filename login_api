
import SwiftUI

struct ScanResultView: View {
    @Environment(\.presentationMode) var presentationMode
    @StateObject private var viewModel = ScanResultViewModel()
    @State private var isExpanded = false
    @State private var isVisible = true
    
    // Add this to accept WUID from navigation
    let wuId: String?
    
    init(wuId: String? = nil) {
        self.wuId = wuId
    }
    
    var body: some View {
        ZStack {
            Color.black.edgesIgnoringSafeArea(.all)
            
            if viewModel.isLoading {
                ProgressView("Analyzing shelf image...")
                    .progressViewStyle(CircularProgressViewStyle(tint: .white))
                    .foregroundColor(.white)
            } else if let error = viewModel.error {
                VStack {
                    Text("Error: \(error.localizedDescription)")
                        .foregroundColor(.white)
                        .padding()
                    Button("Retry") {
                        if let wuId = wuId {
                            viewModel.startPolling(with: wuId)
                        }
                    }
                    .padding()
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(8)
                }
            } else {
                VStack(spacing: 0) {
                    navigationHeader
                    mainImageContent
                    Spacer()
                }
            }
            
            GeometryReader { geometry in
                if isVisible && viewModel.modHealthResponse != nil {
                    ReviewSectionBottomSheet(
                        modHealthResponse: viewModel.modHealthResponse,
                        onTryAgain: {
                            print("Try again tapped")
                        },
                        onDone: {
                            print("Done tapped")
                            presentationMode.wrappedValue.dismiss()
                        },
                        isVisible: $isVisible,
                        isExpanded: $isExpanded,
                        screenHeight: geometry.size.height
                    )
                }
            }
        }
        .navigationBarHidden(true)
        .onAppear {
            if let wuId = wuId {
                viewModel.startPolling(with: wuId)
            }
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                isVisible = true
            }
        }
    }
    
    // MARK: - Navigation Header
    private var navigationHeader: some View {
        ZStack {
            Color(red: 0/255, green: 113/255, blue: 220/255)
                .frame(height: 56)
            
            HStack {
                Button(action: {
                    presentationMode.wrappedValue.dismiss()
                }) {
                    Image(systemName: "chevron.left")
                        .foregroundColor(.white)
                        .frame(width: 24, height: 24)
                }
                .padding(.leading, 16)
                
                Spacer()
                
                Text(viewModel.modHealthResponse?.sectionTitle ?? "Loading...")
                    .font(.system(size: 16, weight: .bold))
                    .foregroundColor(.white)
                
                Spacer()
                
                Button(action: {
                }) {
                    Image(systemName: "questionmark.circle")
                        .foregroundColor(.white)
                        .frame(width: 24, height: 24)
                }
                .padding(.trailing, 16)
            }
        }
    }
    
    // MARK: - Main Image Content
    private var mainImageContent: some View {
        GeometryReader { geometry in
            Rectangle()
                .fill(Color.gray.opacity(0.3))
                .overlay(
                    VStack {
                        Text("Shelf Image")
                            .foregroundColor(.white)
                            .font(.title)
                        
                        if let imageUri = viewModel.modHealthResponse?.enhancedImageUri {
                            Text("Image: \(imageUri)")
                                .foregroundColor(.white.opacity(0.7))
                                .font(.caption)
                        }
                    }
                )
                .frame(width: geometry.size.width, height: geometry.size.height)
        }
    }
}
