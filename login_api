import SwiftUI

struct AislePinOverlayView: View {
    @State private var rows: [AislePinRow] = [AislePinRow()]
    let maxRows: Int = 5

    var onCancel: () -> Void
    var onDisplay: (_ pins: [(zone: String, aisle: String, section: String, selected: Bool)]) -> Void

    var body: some View {
        VStack(spacing: 16) {
            Text("Add Aisle Pins")
                .font(.title3.weight(.semibold))

            ScrollView {
                VStack(spacing: 12) {
                    ForEach($rows) { $row in
                        HStack(spacing: 8) {
                            TextField("Zone", text: $row.zone)
                                .textFieldStyle(.roundedBorder)
                                .frame(width: 70)
                                .textInputAutocapitalization(.never)
                                .disableAutocorrection(true)

                            TextField("Aisle", text: $row.aisle)
                                .textFieldStyle(.roundedBorder)
                                .frame(width: 70)
                                .textInputAutocapitalization(.never)
                                .disableAutocorrection(true)

                            TextField("Section", text: $row.section)
                                .textFieldStyle(.roundedBorder)
                                .frame(width: 80)
                                .textInputAutocapitalization(.never)
                                .disableAutocorrection(true)

                            Toggle("Selected", isOn: $row.selected)
                                .labelsHidden()

                            Button {
                                removeRow(row)
                            } label: {
                                Image(systemName: "trash")
                            }
                            .buttonStyle(.borderless)
                            .foregroundStyle(.red)
                            .disabled(rows.count == 1)
                        }
                    }

                    HStack {
                        Button {
                            addRow()
                        } label: {
                            Label("Add Row", systemImage: "plus.circle.fill")
                                .font(.subheadline)
                        }
                        .disabled(rows.count >= maxRows)

                        Spacer()
                    }
                }
                .padding(.horizontal, 4)
            }
            .frame(maxHeight: 260)

            HStack(spacing: 12) {
                Button("Cancel") {
                    onCancel()
                }
                .buttonStyle(.bordered)

                Button("Display Pins") {
                    onDisplay(validPins())
                }
                .buttonStyle(.borderedProminent)
                .disabled(validPins().isEmpty)
            }
        }
        .padding(24)
        .background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 18))
        .overlay(
            RoundedRectangle(cornerRadius: 18)
                .stroke(Color.secondary.opacity(0.25))
        )
        .shadow(radius: 24)
    }

    private func addRow() {
        guard rows.count < maxRows else { return }
        rows.append(AislePinRow())
    }

    private func removeRow(_ row: AislePinRow) {
        guard rows.count > 1 else { return }
        if let index = rows.firstIndex(of: row) {
            rows.remove(at: index)
        }
    }

    private func validPins() -> [(zone: String, aisle: String, section: String, selected: Bool)] {
        rows.compactMap { row in
            let zone = row.zone.trimmingCharacters(in: .whitespacesAndNewlines)
            let aisle = row.aisle.trimmingCharacters(in: .whitespacesAndNewlines)
            let section = row.section.trimmingCharacters(in: .whitespacesAndNewlines)
            guard !zone.isEmpty, !aisle.isEmpty, !section.isEmpty else { return nil }
            return (zone, aisle, section, row.selected)
        }
    }
}

#Preview {
    ZStack {
        Color.gray.opacity(0.2).ignoresSafeArea()
        AislePinOverlayView(onCancel: {}, onDisplay: { _ in })
            .padding()
    }
}
