import SwiftUI

struct ReviewSectionBottomSheet: View {
    let modHealthResponse: ModHealthResponse?
    let onTryAgain: () -> Void
    let onDone: () -> Void
    @Binding var isPresented: Bool

    // MARK: State
    @State private var isExpanded = false
    @State private var selectedFilters: Set<FilterType> = []

    // MARK: Constants (tweak as needed)
    private let cornerRadius: CGFloat = 16
    private let collapsedHeight: CGFloat = 200
    private let expandedHeight: CGFloat = 400

    var body: some View {
        ZStack(alignment: .bottom) {
            // semiâ€‘transparent background
            Color.black.opacity(0.4)
                .ignoresSafeArea()
                .onTapGesture { isPresented = false }

            // sheet container
            VStack(spacing: 0) {
                header
                Divider()
                if isExpanded {
                    expandedContent
                } else {
                    collapsedContent
                }
                Divider()
                footer
            }
            .frame(height: isExpanded ? expandedHeight : collapsedHeight)
            .background(Color(.systemBackground))
            .clipShape(RoundedRectangle(cornerRadius: cornerRadius, style: .continuous))
            .animation(.easeInOut(duration: 0.3), value: isExpanded)
            .padding(.horizontal, 16)
            .padding(.bottom, 20)
        }
    }

    // MARK: Header

    private var header: some View {
        HStack {
            Button {
                withAnimation { isExpanded.toggle() }
            } label: {
                Image(systemName: "chevron.up")
                    .rotationEffect(.degrees(isExpanded ? 0 : 180))
                    .frame(width: 24, height: 24)
            }

            Text("Review section")
                .font(.headline)
                .frame(maxWidth: .infinity, alignment: .center)

            Button {
                isPresented = false
            } label: {
                Image(systemName: "xmark")
                    .frame(width: 24, height: 24)
            }
        }
        .padding()
    }

    // MARK: Collapsed Content

    private var collapsedContent: some View {
        HStack(spacing: 24) {
            statusView(icon: "circle.fill", color: .red,      label: "Missing",   count: modHealthResponse?.missingCount)
            statusView(icon: "triangle.fill", color: .yellow, label: "Misplaced", count: modHealthResponse?.misplacedCount)
            statusView(icon: "circle.fill", color: .orange,   label: "Unknown",   count: modHealthResponse?.unknownCount)
        }
        .padding(.vertical, 16)
    }

    private func statusView(icon: String, color: Color, label: String, count: Int?) -> some View {
        HStack(spacing: 4) {
            Image(systemName: icon)
                .foregroundColor(color)
                .font(.system(size: 12))
            Text("\(label) (\(count ?? 0))")
                .font(.subheadline)
        }
    }

    // MARK: Expanded Content

    private var expandedContent: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Filter By")
                .font(.subheadline)
                .bold()

            // checkbox list
            ForEach(FilterType.allCases, id: \.self) { filter in
                Toggle(isOn: Binding(
                    get: { selectedFilters.contains(filter) },
                    set: { isOn in
                        if isOn { selectedFilters.insert(filter) }
                        else    { selectedFilters.remove(filter) }
                    })
                ) {
                    HStack {
                        Text(filter.title)
                        Spacer()
                        Text("(\(filter.count(from: modHealthResponse)))")
                            .foregroundColor(.secondary)
                    }
                    .font(.subheadline)
                }
                // Requires iOS 17+; for earlier versions you can roll your own ToggleStyle
                .toggleStyle(.checkbox)
            }
        }
        .padding()
    }

    enum FilterType: CaseIterable {
        case missing, misplaced, unknown, correct

        var title: String {
            switch self {
            case .missing:   return "Missing items"
            case .misplaced: return "Misplaced items"
            case .unknown:   return "Unknown items"
            case .correct:   return "Correct items"
            }
        }

        func count(from resp: ModHealthResponse?) -> Int {
            guard let r = resp else { return 0 }
            switch self {
            case .missing:   return r.missingCount
            case .misplaced: return r.misplacedCount
            case .unknown:   return r.unknownCount
            case .correct:   return r.correctCount
            }
        }
    }

    // MARK: Footer

    private var footer: some View {
        HStack {
            Button(action: onTryAgain) {
                Text("Try again")
                    .underline()
                    .font(.subheadline)
            }

            Spacer()

            Button(action: onDone) {
                Text("Done")
                    .font(.subheadline)
                    .frame(minWidth: 80)
                    .padding(.vertical, 8)
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(8)
            }
        }
        .padding()
    }
}
