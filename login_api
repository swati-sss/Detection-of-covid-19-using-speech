import SwiftUI
import LivingDesign
import compass_sdk_ios

final class MapContainerViewController: UIViewController {
    let mapRoot: LDRootViewController
    private var rehostInvocationCount = 0

    init(mapRoot: LDRootViewController) {
        self.mapRoot = mapRoot
        super.init(nibName: nil, bundle: nil)
    }
    required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        Log.debug("[SwiftUIHost] viewWillAppear – triggering rehostIfNeeded()")
        rehostIfNeeded()
    }

    func rehostIfNeeded() {
        rehostInvocationCount += 1
        let invocation = rehostInvocationCount

        let needsParentUpdate = mapRoot.parent !== self
        let needsViewAttachment = mapRoot.view.superview !== view
        Log.debug("[SwiftUIHost] rehostIfNeeded #\(invocation) begin. needsParentUpdate: \(needsParentUpdate), needsViewAttachment: \(needsViewAttachment), viewBounds: \(view.bounds)")

        let child = mapRoot

        if let parent = child.parent, parent !== self {
            child.willMove(toParent: nil)
            child.view.removeFromSuperview()
            child.removeFromParent()
        }

        if child.parent !== self {
            addChild(child)
            child.didMove(toParent: self)
        }

        if child.view.superview !== view {
            let v = child.view!
            v.translatesAutoresizingMaskIntoConstraints = false
            view.addSubview(v)
            NSLayoutConstraint.activate([
                v.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
                v.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
                v.topAnchor.constraint(equalTo: view.topAnchor), 
                v.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
            ])
        }

        view.setNeedsLayout()
        view.layoutIfNeeded()
        Log.debug("[SwiftUIHost] rehostIfNeeded #\(invocation) end. mapRootFrame: \(mapRoot.view.frame)")
    }
}

struct MapRootHost: UIViewControllerRepresentable {
    let viewController: LDRootViewController

    func makeUIViewController(context: Context) -> MapContainerViewController {
        Log.debug("[SwiftUIHost] makeUIViewController – creating MapContainerViewController")
        MapContainerViewController(mapRoot: viewController)
    }

    func updateUIViewController(_ uiViewController: MapContainerViewController, context: Context) {
        Log.debug("[SwiftUIHost] updateUIViewController – calling rehostIfNeeded()")
        uiViewController.rehostIfNeeded()
    }
}
