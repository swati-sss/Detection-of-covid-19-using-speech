import SwiftUI
import compass_sdk_ios

struct FeatureFlagsView: View {
    @ObservedObject var bridge: HomeViewModel
    @State private var flags: [Flag] = []
    @State private var originalBackendConfig: [String: Any]?
    @State private var currentStoreId: Int?
    @State private var showSuccessAlert = false
    @State private var showRevertAlert = false
    @State private var editingFlag: Flag?
    @SwiftUI.Environment(\.dismiss) private var dismiss

    private let sectionOrder: [FlagSection] = [
        .generalBoolean,
        .generalNumeric,
        .text,
        .navigation,
        .mapUi,
        .pins,
        .offset
    ]

    struct Flag: Identifiable {
        let id = UUID()
        let name: String
        let key: String
        var value: Any
        let type: FlagType
        let section: FlagSection
        let parentKey: String?

        enum FlagType {
            case boolean
            case double
            case integer
            case string
        }
    }

    enum FlagSection: String {
        case generalBoolean = "Boolean Flags"
        case generalNumeric = "Numeric Flags"
        case text = "Text Flags"
        case navigation = "Navigation Config"
        case mapUi = "Map UI Config"
        case pins = "Pins Config"
        case offset = "Offset Config"

        var title: String { rawValue }
    }

    struct FlagGroup: Identifiable {
        let section: FlagSection
        let flags: [Flag]

        var id: FlagSection { section }
    }

    private var groupedFlags: [FlagGroup] {
        sectionOrder.compactMap { section in
            let items = flags.filter { $0.section == section }
            return items.isEmpty ? nil : FlagGroup(section: section, flags: items)
        }
    }

    var body: some View {
        NavigationView {
            List {
                ForEach(groupedFlags) { group in
                    Section(header: Text(group.section.title)) {
                        ForEach(group.flags) { flag in
                            flagRow(for: flag)
                        }
                    }
                }
            }
            .navigationTitle(hasOverridesApplied() ? "Feature Flags (Mod)" : "Feature Flags")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        dismiss()
                    }
                }

                ToolbarItemGroup(placement: .navigationBarTrailing) {
                    Button("Revert") {
                        revertTapped()
                    }

                    Button("Apply") {
                        applyTapped()
                    }
                    .fontWeight(.bold)
                }
            }
            .onAppear {
                loadFlags()
            }
            .alert("Success", isPresented: $showSuccessAlert) {
                Button("OK") {
                    dismiss()
                }
            } message: {
                Text("Feature flags applied successfully")
            }
            .alert("Reverted", isPresented: $showRevertAlert) {
                Button("OK") { }
            } message: {
                Text("Feature flags reverted to backend defaults")
            }
            .sheet(item: $editingFlag) { flag in
                InputSheet(flag: flag) { newValue in
                    updateFlagValue(flag, with: newValue)
                }
            }
        }
    }

    private func loadFlags() {
        currentStoreId = bridge.compass?.currentStore
        originalBackendConfig = bridge.compass?.getCurrentStoreConfig()
        guard let config = originalBackendConfig else { return }

        let navigationConfig = config["navigation"] as? [String: Any] ?? [:]
        let mapUiConfig = config["mapUi"] as? [String: Any] ?? [:]
        let pinsConfig = config["pins"] as? [String: Any] ?? [:]
        let offsetConfig = config["offset"] as? [String: Any] ?? [:]

        flags = [
            Flag(name: "Blue Dot Enabled", key: "bluedotEnabled",
                 value: boolValue(config["bluedotEnabled"]),
                 type: .boolean, section: .generalBoolean, parentKey: nil),
            Flag(name: "Blue Dot Displayed", key: "bluedotDisplayed",
                 value: boolValue(config["bluedotDisplayed"]),
                 type: .boolean, section: .generalBoolean, parentKey: nil),
            Flag(name: "Dynamic Map Enabled", key: "dynamicMapEnabled",
                 value: boolValue(config["dynamicMapEnabled"]),
                 type: .boolean, section: .generalBoolean, parentKey: nil),
            Flag(name: "Zoom Control Enabled", key: "zoomControlEnabled",
                 value: boolValue(config["zoomControlEnabled"]),
                 type: .boolean, section: .generalBoolean, parentKey: nil),
            Flag(name: "Error Screens Enabled", key: "errorScreensEnabled",
                 value: boolValue(config["errorScreensEnabled"]),
                 type: .boolean, section: .generalBoolean, parentKey: nil),
            Flag(name: "Dynamic Map Rotation", key: "dynamicMapRotationEnabled",
                 value: boolValue(config["dynamicMapRotationEnabled"]),
                 type: .boolean, section: .generalBoolean, parentKey: nil),
            Flag(name: "Spinner Enabled", key: "spinnerEnabled",
                 value: boolValue(config["spinnerEnabled"]),
                 type: .boolean, section: .generalBoolean, parentKey: nil),
            Flag(name: "Use Background Service", key: "useBackgroundService",
                 value: boolValue(config["useBackgroundService"]),
                 type: .boolean, section: .generalBoolean, parentKey: nil),
            Flag(name: "Heart Beat In Location", key: "heartbeatInLocation",
                 value: boolValue(config["heartbeatInLocation"]),
                 type: .boolean, section: .generalBoolean, parentKey: nil),
            Flag(name: "Heart Beat In User", key: "heartBeatInUser",
                 value: boolValue(config["heartBeatInUser"]),
                 type: .boolean, section: .generalBoolean, parentKey: nil),
            Flag(name: "Navigation Enabled Flag", key: "navigationEnabled",
                 value: boolValue(config["navigationEnabled"]),
                 type: .boolean, section: .generalBoolean, parentKey: nil),
            Flag(name: "Valid", key: "valid",
                 value: boolValue(config["valid"]),
                 type: .boolean, section: .generalBoolean, parentKey: nil),
            Flag(name: "Analytics Enabled", key: "analytics",
                 value: boolValue(config["analytics"]),
                 type: .boolean, section: .generalBoolean, parentKey: nil),

            Flag(name: "Background Service Timeout", key: "backgroundServiceTimeout",
                 value: doubleValue(config["backgroundServiceTimeout"], default: 300.0),
                 type: .double, section: .generalNumeric, parentKey: nil),
            Flag(name: "Geofence Check Timeout", key: "geoFenceCheckTimeout",
                 value: doubleValue(config["geoFenceCheckTimeout"], default: 1.0),
                 type: .double, section: .generalNumeric, parentKey: nil),
            Flag(name: "Positioning Session Timeout", key: "positioningSessionTimeout",
                 value: doubleValue(config["positioningSessionTimeout"], default: 1.0),
                 type: .double, section: .generalNumeric, parentKey: nil),
            Flag(name: "Geofence Radius", key: "geofenceRadius",
                 value: doubleValue(config["geofenceRadius"]),
                 type: .double, section: .generalNumeric, parentKey: nil),
            Flag(name: "Session Refresh Time", key: "sessionRefreshTime",
                 value: intValue(config["sessionRefreshTime"], default: 900),
                 type: .integer, section: .generalNumeric, parentKey: nil),
            Flag(name: "Heartbeat Interval", key: "heartbeatInterval",
                 value: doubleValue(config["heartbeatInterval"], default: 300_000.0),
                 type: .double, section: .generalNumeric, parentKey: nil),
            Flag(name: "Batch Interval", key: "batchInterval",
                 value: doubleValue(config["batchInterval"], default: 60_000.0),
                 type: .double, section: .generalNumeric, parentKey: nil),
            Flag(name: "Latitude", key: "latitude",
                 value: doubleValue(config["latitude"]),
                 type: .double, section: .generalNumeric, parentKey: nil),
            Flag(name: "Longitude", key: "longitude",
                 value: doubleValue(config["longitude"]),
                 type: .double, section: .generalNumeric, parentKey: nil),
            Flag(name: "Created At", key: "createdAt",
                 value: doubleValue(config["createdAt"]),
                 type: .double, section: .generalNumeric, parentKey: nil),
            Flag(name: "Updated At", key: "updatedAt",
                 value: doubleValue(config["updatedAt"]),
                 type: .double, section: .generalNumeric, parentKey: nil),
            Flag(name: "Store ID", key: "storeId",
                 value: intValue(config["storeId"]),
                 type: .integer, section: .generalNumeric, parentKey: nil),

            Flag(name: "Map Type", key: "mapType",
                 value: stringValue(config["mapType"]),
                 type: .string, section: .text, parentKey: nil),
            Flag(name: "Supported Event List", key: "supportedEventList",
                 value: stringValue(config["supportedEventList"]),
                 type: .string, section: .text, parentKey: nil),

            Flag(name: "Navigation Config Enabled", key: "enabled",
                 value: boolValue(navigationConfig["enabled"]),
                 type: .boolean, section: .navigation, parentKey: "navigation"),
            Flag(name: "Refresh Duration", key: "refreshDuration",
                 value: doubleValue(navigationConfig["refreshDuration"]),
                 type: .double, section: .navigation, parentKey: "navigation"),
            Flag(name: "Automatic Navigation Enabled", key: "isAutomaticNavigation",
                 value: boolValue(navigationConfig["isAutomaticNavigation"], default: true),
                 type: .boolean, section: .navigation, parentKey: "navigation"),

            Flag(name: "Banner Enabled", key: "bannerEnabled",
                 value: boolValue(mapUiConfig["bannerEnabled"]),
                 type: .boolean, section: .mapUi, parentKey: "mapUi"),
            Flag(name: "Snack Bar Enabled", key: "snackBarEnabled",
                 value: boolValue(mapUiConfig["snackBarEnabled"]),
                 type: .boolean, section: .mapUi, parentKey: "mapUi"),
            Flag(name: "Pin Location Unavailable Banner", key: "pinLocationUnavailableBannerEnabled",
                 value: boolValue(mapUiConfig["pinLocationUnavailableBannerEnabled"]),
                 type: .boolean, section: .mapUi, parentKey: "mapUi"),

            Flag(name: "Action Alley Enabled", key: "actionAlleyEnabled",
                 value: boolValue(pinsConfig["actionAlleyEnabled"]),
                 type: .boolean, section: .pins, parentKey: "pins"),
            Flag(name: "Group Pins Enabled", key: "groupPinsEnabled",
                 value: boolValue(pinsConfig["groupPinsEnabled"], default: true),
                 type: .boolean, section: .pins, parentKey: "pins"),

            Flag(name: "Map Offset X", key: "x",
                 value: doubleValue(offsetConfig["x"]),
                 type: .double, section: .offset, parentKey: "offset"),
            Flag(name: "Map Offset Y", key: "y",
                 value: doubleValue(offsetConfig["y"]),
                 type: .double, section: .offset, parentKey: "offset")
        ]
    }

    @ViewBuilder
    private func flagRow(for flag: Flag) -> some View {
        switch flag.type {
        case .boolean:
            HStack {
                Text(flag.name)
                    .font(.subheadline)
                Spacer()
                Toggle("", isOn: Binding(
                    get: { flag.value as? Bool ?? false },
                    set: { newValue in
                        updateFlagValue(flag, with: newValue)
                    }
                ))
            }
        default:
            HStack {
                Text(flag.name)
                    .font(.subheadline)
                Spacer()
                Text(formatValue(flag))
                    .foregroundColor(.blue)
                    .lineLimit(1)
                    .onTapGesture {
                        editingFlag = flag
                    }
            }
        }
    }

    private func updateFlagValue(_ flag: Flag, with newValue: Any) {
        if let index = flags.firstIndex(where: { $0.id == flag.id }) {
            flags[index].value = newValue
        }
    }

    private func formatValue(_ flag: Flag) -> String {
        switch flag.type {
        case .double:
            return FeatureFlagsView.formatDouble(flag.value as? Double ?? 0)
        case .integer:
            return "\(flag.value as? Int ?? 0)"
        case .string:
            return "\(flag.value as? String ?? "")"
        default:
            return ""
        }
    }

    static func formatDouble(_ value: Double) -> String {
        value.truncatingRemainder(dividingBy: 1) == 0 ? String(Int(value)) : String(value)
    }

    private func hasOverridesApplied() -> Bool {
        return bridge.compass?.hasOverridesApplied() ?? false
    }

    private func applyTapped() {
        var overrides: [String: Any] = [:]
        for flag in flags {
            if let parent = flag.parentKey {
                var nested = overrides[parent] as? [String: Any] ?? [:]
                nested[flag.key] = flag.value
                overrides[parent] = nested
            } else {
                overrides[flag.key] = flag.value
            }
        }

        bridge.compass?.applyFeatureFlagOverrides(overrides)

        if let storeId = currentStoreId {
            UserDefaults.standard.set(overrides, forKey: "FeatureFlagOverrides_\(storeId)")
            UserDefaults.standard.synchronize()
        }

        showSuccessAlert = true
    }

    private func revertTapped() {
        if let storeId = currentStoreId {
            UserDefaults.standard.removeObject(forKey: "FeatureFlagOverrides_\(storeId)")
            UserDefaults.standard.synchronize()
        }

        bridge.compass?.revertToOriginalConfig()
        loadFlags()
        showRevertAlert = true
    }

    private func boolValue(_ value: Any?, default defaultValue: Bool = false) -> Bool {
        if let boolValue = value as? Bool {
            return boolValue
        }
        if let number = value as? NSNumber {
            return number.boolValue
        }
        return defaultValue
    }

    private func doubleValue(_ value: Any?, default defaultValue: Double = 0.0) -> Double {
        if let doubleValue = value as? Double {
            return doubleValue
        }
        if let intValue = value as? Int {
            return Double(intValue)
        }
        if let number = value as? NSNumber {
            return number.doubleValue
        }
        if let string = value as? String, let doubleValue = Double(string) {
            return doubleValue
        }
        return defaultValue
    }

    private func intValue(_ value: Any?, default defaultValue: Int = 0) -> Int {
        if let intValue = value as? Int {
            return intValue
        }
        if let number = value as? NSNumber {
            return number.intValue
        }
        if let string = value as? String, let intValue = Int(string) {
            return intValue
        }
        return defaultValue
    }

    private func stringValue(_ value: Any?) -> String {
        value as? String ?? ""
    }
}

struct InputSheet: View {
    let flag: FeatureFlagsView.Flag
    let onSave: (Any) -> Void
    @State private var inputText: String = ""
    @SwiftUI.Environment(\.dismiss) private var dismiss

    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                Text(flag.name)
                    .font(.headline)
                    .padding(.top, 20)

                TextField("Enter value", text: $inputText)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .keyboardType(keyboardType(for: flag.type))
                    .padding(.horizontal)

                Spacer()
            }
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        dismiss()
                    }
                }

                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("OK") {
                        if flag.type == .double {
                            onSave(Double(inputText) ?? 0)
                        } else if flag.type == .integer {
                            onSave(Int(inputText) ?? 0)
                        } else {
                            onSave(inputText)
                        }
                        dismiss()
                    }
                    .fontWeight(.bold)
                }
            }
            .onAppear {
                if flag.type == .double {
                    inputText = FeatureFlagsView.formatDouble(flag.value as? Double ?? 0)
                } else if flag.type == .integer {
                    inputText = "\(flag.value as? Int ?? 0)"
                } else {
                    inputText = "\(flag.value as? String ?? "")"
                }
            }
        }
    }

    private func keyboardType(for type: FeatureFlagsView.Flag.FlagType) -> UIKeyboardType {
        switch type {
        case .double:
            return .decimalPad
        case .integer:
            return .numberPad
        default:
            return .default
        }
    }
}
