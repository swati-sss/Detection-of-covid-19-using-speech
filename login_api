import SwiftUI

// MARK: - Custom Bottom Sheet with Expand/Collapse Functionality
struct ReviewSectionBottomSheet: View {
    let modHealthResponse: ModHealthResponse?
    let onTryAgain: () -> Void
    let onDone: () -> Void
    
    // State for controlling sheet position
    @State private var sheetPosition: SheetPosition = .halfVisible
    
    // Define the different positions the sheet can be in
    enum SheetPosition {
        case hidden      // Completely below screen
        case halfVisible // Default state - partially visible
        case expanded    // Almost fully visible
        
        // Calculate the offset for each position
        var offset: CGFloat {
            switch self {
            case .hidden:
                return 400      // Slide completely down (adjust based on your sheet height)
            case .halfVisible:
                return 200      // Default position - half visible
            case .expanded:
                return 50       // Almost fully up, leaving some margin from top
            }
        }
    }
    
    // Computed properties for easier access to data
    private var missingCount: Int {
        modHealthResponse?.missingItems.count ?? 0
    }
    
    private var misplacedCount: Int {
        modHealthResponse?.misplacedItems.count ?? 0
    }
    
    private var unknownCount: Int {
        modHealthResponse?.unknownItems.count ?? 0
    }
    
    var body: some View {
        // The full sheet container - much taller than what's initially visible
        VStack(spacing: 0) {
            // Top section - always visible content (stats and buttons)
            topSection
                .padding(.horizontal, 16)
                .padding(.top, 8)
                .padding(.bottom, 16)
                .background(Color.white)
            
            // Expandable content section - initially hidden below screen
            expandableContent
                .padding(.horizontal, 16)
                .padding(.bottom, 32)
                .background(Color.white)
        }
        .frame(maxWidth: .infinity)
        .background(Color.white)
        .cornerRadius(16, corners: [.topLeft, .topRight])
        // Add shadow for depth
        .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: -5)
        // Control the sheet position with offset
        .offset(y: sheetPosition.offset)
        // Smooth animation when position changes
        .animation(.easeInOut(duration: 0.3), value: sheetPosition)
    }
    
    // MARK: - Top Section (Always Visible)
    private var topSection: some View {
        VStack(spacing: 16) {
            // Header with expand/collapse and close buttons
            headerView
            
            // Stats showing counts with icons
            statsView
            
            // Divider
            Rectangle()
                .fill(Color.gray.opacity(0.3))
                .frame(height: 1)
            
            // Action buttons
            buttonSection
        }
    }
    
    // MARK: - Header with Control Buttons
    private var headerView: some View {
        HStack {
            // Expand button - changes based on current state
            Button(action: {
                handleExpandTap()
            }) {
                Image(systemName: sheetPosition == .expanded ? "chevron.down" : "chevron.up")
                    .foregroundColor(.black)
                    .frame(width: 24, height: 24)
            }
            
            Spacer()
            
            // Title
            Text("Review section")
                .font(.system(size: 20, weight: .bold))
                .foregroundColor(.black)
            
            Spacer()
            
            // Close button - slides sheet down to hidden
            Button(action: {
                withAnimation {
                    sheetPosition = .hidden
                }
            }) {
                Image(systemName: "xmark")
                    .foregroundColor(.black)
                    .frame(width: 24, height: 24)
            }
        }
    }
    
    // MARK: - Stats Section with Icons and Counts
    private var statsView: some View {
        HStack(spacing: 20) {
            // Missing items
            statsItem(
                icon: "exclamationmark.circle.fill",
                iconColor: .red,
                text: "Missing",
                count: missingCount
            )
            
            // Misplaced items  
            statsItem(
                icon: "exclamationmark.triangle.fill",
                iconColor: .yellow,
                text: "Misplaced",
                count: misplacedCount
            )
            
            // Unknown items
            statsItem(
                icon: "circle.fill",
                iconColor: .orange,
                text: "Unknown",
                count: unknownCount
            )
        }
        .frame(height: 32)
    }
    
    // Helper to create individual stat items with consistent styling
    private func statsItem(icon: String, iconColor: Color, text: String, count: Int) -> some View {
        HStack(spacing: 4) {
            Image(systemName: icon)
                .foregroundColor(iconColor)
                .font(.system(size: 16))
            
            Text("\(text) (\(count))")
                .font(.system(size: 14, weight: .regular))
                .foregroundColor(.black)
        }
    }
    
    // MARK: - Action Buttons
    private var buttonSection: some View {
        HStack(spacing: 16) {
            // Try Again button with underlined text
            Button(action: onTryAgain) {
                Text("Try again")
                    .font(.system(size: 16, weight: .regular))
                    .foregroundColor(.black)
                    .underline()
            }
            .frame(width: 100, height: 40)
            
            // Done button with primary styling
            Button(action: onDone) {
                Text("Done")
                    .font(.system(size: 16, weight: .bold))
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity, minHeight: 40)
                    .background(Color(red: 0/255, green: 113/255, blue: 220/255))
                    .cornerRadius(20)
            }
        }
    }
    
    // MARK: - Expandable Content (Initially Hidden)
    private var expandableContent: some View {
        VStack(spacing: 20) {
            // Placeholder for future expandable content
            Text("Expandable content will go here")
                .font(.system(size: 16, weight: .regular))
                .foregroundColor(.gray)
                .padding(.vertical, 40)
            
            // This is where you'll later add:
            // - Detailed item lists
            // - Checkboxes for filtering
            // - Individual item details
            // - Any other expanded functionality
            
            Spacer()
        }
        .frame(height: 300) // Reserve space for expanded content
    }
    
    // MARK: - Handle Expand Button Logic
    private func handleExpandTap() {
        withAnimation {
            switch sheetPosition {
            case .hidden:
                sheetPosition = .halfVisible
            case .halfVisible:
                sheetPosition = .expanded
            case .expanded:
                sheetPosition = .halfVisible
            }
        }
    }
}

// MARK: - Corner Radius Extension for Specific Corners
extension View {
    func cornerRadius(_ radius: CGFloat, corners: UIRectCorner) -> some View {
        clipShape(RoundedCorner(radius: radius, corners: corners))
    }
}

struct RoundedCorner: Shape {
    var radius: CGFloat = .infinity
    var corners: UIRectCorner = .allCorners

    func path(in rect: CGRect) -> Path {
        let path = UIBezierPath(
            roundedRect: rect,
            byRoundingCorners: corners,
            cornerRadii: CGSize(width: radius, height: radius)
        )
        return Path(path.cgPath)
    }
}








import SwiftUI

struct ContentView: View {
    @Environment(\.presentationMode) var presentationMode
    @StateObject private var viewModel = ModHealthViewModel()
    @State private var showReviewBottomSheet = false
    
    var body: some View {
        ZStack {
            Color.black.edgesIgnoringSafeArea(.all)
            
            if viewModel.isLoading {
                ProgressView()
                    .progressViewStyle(CircularProgressViewStyle(tint: .white))
            } else if let error = viewModel.error {
                Text("Error: \(error.localizedDescription)")
                    .foregroundColor(.white)
                    .padding()
            } else {
                VStack(spacing: 0) {
                    // Navigation Header
                    navigationHeader
                    
                    // Main Image Content
                    mainImageContent
                    
                    Spacer()
                }
            }
        }
        // Custom bottom sheet overlay
        .overlay(
            Group {
                if showReviewBottomSheet {
                    ReviewSectionBottomSheet(
                        modHealthResponse: viewModel.modHealthResponse,
                        onTryAgain: {
                            // Handle try again action
                            print("Try again tapped")
                            // You can add your retry logic here
                        },
                        onDone: {
                            // Handle done action  
                            print("Done tapped")
                            // You can add navigation or completion logic here
                        }
                    )
                }
            },
            alignment: .bottom
        )
        .navigationBarHidden(true)
        .onAppear {
            // Delay the bottom sheet presentation slightly to ensure smooth UI
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                showReviewBottomSheet = true
            }
        }
    }
    
    // MARK: - Navigation Header (unchanged)
    private var navigationHeader: some View {
        ZStack {
            // Blue background matching your app's theme
            Color(red: 0/255, green: 113/255, blue: 220/255)
                .frame(height: 56)
            
            HStack {
                // Back button
                Button(action: {
                    presentationMode.wrappedValue.dismiss()
                }) {
                    Image(systemName: "chevron.left")
                        .foregroundColor(.white)
                        .frame(width: 24, height: 24)
                }
                .padding(.leading, 16)
                
                Spacer()
                
                // Title from JSON data - using the computed property from ModHealthResponse
                Text(viewModel.modHealthResponse?.sectionTitle ?? "Loading...")
                    .font(.system(size: 16, weight: .bold))
                    .foregroundColor(.white)
                
                Spacer()
                
                // Help button
                Button(action: {
                    // Handle help action
                }) {
                    Image(systemName: "questionmark.circle")
                        .foregroundColor(.white)
                        .frame(width: 24, height: 24)
                }
                .padding(.trailing, 16)
            }
        }
    }
    
    // MARK: - Main Image Content (unchanged)
    private var mainImageContent: some View {
        GeometryReader { geometry in
            // Placeholder for the shelf image - you can replace this with AsyncImage
            Rectangle()
                .fill(Color.gray.opacity(0.3))
                .overlay(
                    VStack {
                        Text("Shelf Image")
                            .foregroundColor(.white)
                            .font(.title)
                        
                        // Display image URI from JSON data if available
                        if let imageUri = viewModel.modHealthResponse?.enhanceImageURI {
                            Text("Image: \(imageUri)")
                                .foregroundColor(.white.opacity(0.7))
                                .font(.caption)
                        }
                    }
                )
                .frame(width: geometry.size.width, height: geometry.size.height)
        }
    }
}
