func pollTaskStatus(wuId: String) -> AnyPublisher<ModHealthResponseData?, Error> {
    guard let urlString = buildPollingURL(wuId: wuId) else {
        return Fail(error: URLError(.badURL)).eraseToAnyPublisher()
    }
    
    let headers = APIHelper.getStandardRequestHeaders(keychainService: keychainService)
    
    Log.info("=== MOD-HEALTH POLLING REQUEST ===")
    Log.info("URL: \(urlString)")
    Log.info("WUID: \(wuId)")
    Log.info("=== END REQUEST INFO ===")
    
    // Create a raw URLRequest to see the actual response
    guard let url = URL(string: urlString) else {
        return Fail(error: URLError(.badURL)).eraseToAnyPublisher()
    }
    
    var request = URLRequest(url: url)
    request.httpMethod = "GET"
    headers.forEach { key, value in
        request.setValue(value, forHTTPHeaderField: key)
    }
    
    return URLSession.shared.dataTaskPublisher(for: request)
        .map { data, response -> ModHealthResponseData? in
            // LOG THE RAW RESPONSE
            let responseString = String(data: data, encoding: .utf8) ?? "Unable to decode response"
            Log.info("=== RAW API RESPONSE ===")
            Log.info(responseString)
            Log.info("=== END RAW RESPONSE ===")
            
            // Try to decode - but handle errors gracefully
            do {
                let apiResponse = try JSONDecoder().decode(ModHealthAPIResponse.self, from: data)
                return apiResponse.payload.data.first
            } catch {
                Log.error("Decoding failed: \(error)")
                // Let's try to understand the structure
                if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any] {
                    Log.info("JSON structure: \(json.keys)")
                    if let payload = json["payload"] {
                        Log.info("Payload type: \(type(of: payload))")
                        Log.info("Payload content: \(payload)")
                    }
                }
                throw error
            }
        }
        .mapError { error in
            Log.error("Network or parsing error: \(error)")
            return error
        }
        .eraseToAnyPublisher()
}
