import UIKit
import compass_sdk_ios
import Combine

class FeatureFlagViewController: UIViewController {
    // MARK: - Properties
    private var cancellables = Set<AnyCancellable>()
    private weak var compass: Compass?
    
    // MARK: - UI Elements
    private lazy var scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        return scrollView
    }()
    
    private lazy var contentView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private lazy var titleLabel: UILabel = {
        let label = UILabel()
        label.text = "Feature Flags"
        label.font = .boldSystemFont(ofSize: 24)
        label.textAlignment = .center
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var subtitleLabel: UILabel = {
        let label = UILabel()
        label.text = "View current backend feature flag values"
        label.font = .systemFont(ofSize: 16)
        label.textColor = .systemGray
        label.textAlignment = .center
        label.numberOfLines = 0
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    // Feature flag container
    private lazy var featureFlagContainer: UIView = {
        let view = UIView()
        view.backgroundColor = .systemGray6
        view.layer.cornerRadius = 12
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    // Zoom Control Feature Flag
    private lazy var zoomControlLabel: UILabel = {
        let label = UILabel()
        label.text = "Zoom Control Enabled"
        label.font = .systemFont(ofSize: 18, weight: .medium)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var zoomControlDescriptionLabel: UILabel = {
        let label = UILabel()
        label.text = "Controls whether zoom in/out buttons are shown on the map"
        label.font = .systemFont(ofSize: 14)
        label.textColor = .systemGray
        label.numberOfLines = 0
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var zoomControlToggle: UISwitch = {
        let toggle = UISwitch()
        toggle.isUserInteractionEnabled = false // Disabled for now since we're just viewing
        toggle.translatesAutoresizingMaskIntoConstraints = false
        return toggle
    }()
    
    private lazy var zoomControlValueLabel: UILabel = {
        let label = UILabel()
        label.font = .monospacedSystemFont(ofSize: 14, weight: .regular)
        label.textColor = .systemBlue
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    // MARK: - Initialization
    init(compass: Compass?) {
        self.compass = compass
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        loadFeatureFlagValues()
    }
    
    // MARK: - UI Setup
    private func setupUI() {
        view.backgroundColor = .systemBackground
        
        // Navigation setup
        title = "Feature Flags"
        navigationItem.leftBarButtonItem = UIBarButtonItem(
            barButtonSystemItem: .close,
            target: self,
            action: #selector(closeButtonTapped)
        )
        
        // Add subviews
        view.addSubview(scrollView)
        scrollView.addSubview(contentView)
        
        // Add content to container
        contentView.addSubview(titleLabel)
        contentView.addSubview(subtitleLabel)
        contentView.addSubview(featureFlagContainer)
        
        // Add feature flag elements to container
        featureFlagContainer.addSubview(zoomControlLabel)
        featureFlagContainer.addSubview(zoomControlDescriptionLabel)
        featureFlagContainer.addSubview(zoomControlToggle)
        featureFlagContainer.addSubview(zoomControlValueLabel)
        
        setupConstraints()
    }
    
    private func setupConstraints() {
        NSLayoutConstraint.activate([
            // Scroll view constraints
            scrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            
            // Content view constraints
            contentView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            contentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            contentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            contentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            contentView.widthAnchor.constraint(equalTo: scrollView.widthAnchor),
            
            // Title and subtitle
            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 20),
            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            
            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 8),
            subtitleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            subtitleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            
            // Feature flag container
            featureFlagContainer.topAnchor.constraint(equalTo: subtitleLabel.bottomAnchor, constant: 30),
            featureFlagContainer.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            featureFlagContainer.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            featureFlagContainer.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -20),
            
            // Zoom control elements inside container
            zoomControlLabel.topAnchor.constraint(equalTo: featureFlagContainer.topAnchor, constant: 16),
            zoomControlLabel.leadingAnchor.constraint(equalTo: featureFlagContainer.leadingAnchor, constant: 16),
            
            zoomControlToggle.centerYAnchor.constraint(equalTo: zoomControlLabel.centerYAnchor),
            zoomControlToggle.trailingAnchor.constraint(equalTo: featureFlagContainer.trailingAnchor, constant: -16),
            zoomControlToggle.leadingAnchor.constraint(greaterThanOrEqualTo: zoomControlLabel.trailingAnchor, constant: 16),
            
            zoomControlDescriptionLabel.topAnchor.constraint(equalTo: zoomControlLabel.bottomAnchor, constant: 4),
            zoomControlDescriptionLabel.leadingAnchor.constraint(equalTo: featureFlagContainer.leadingAnchor, constant: 16),
            zoomControlDescriptionLabel.trailingAnchor.constraint(equalTo: zoomControlToggle.leadingAnchor, constant: -16),
            
            zoomControlValueLabel.topAnchor.constraint(equalTo: zoomControlDescriptionLabel.bottomAnchor, constant: 8),
            zoomControlValueLabel.leadingAnchor.constraint(equalTo: featureFlagContainer.leadingAnchor, constant: 16),
            zoomControlValueLabel.trailingAnchor.constraint(equalTo: featureFlagContainer.trailingAnchor, constant: -16),
            zoomControlValueLabel.bottomAnchor.constraint(equalTo: featureFlagContainer.bottomAnchor, constant: -16)
        ])
    }
    
    // MARK: - Feature Flag Loading
    private func loadFeatureFlagValues() {
        // We'll get the current feature flag values from the compass instance
        // For now, we'll show loading state and then update with actual values
        zoomControlValueLabel.text = "Loading..."
        
        // Get feature flag values from compass
        compass?.getCurrentFeatureFlags { [weak self] featureFlags in
            DispatchQueue.main.async {
                self?.updateUI(with: featureFlags)
            }
        }
    }
    
    private func updateUI(with featureFlags: FeatureFlagValues) {
        // Update the zoom control toggle and value label
        zoomControlToggle.isOn = featureFlags.zoomControlEnabled
        zoomControlValueLabel.text = "Current value: \(featureFlags.zoomControlEnabled)"
    }
    
    // MARK: - Actions
    @objc private func closeButtonTapped() {
        dismiss(animated: true)
    }
}

// MARK: - Feature Flag Data Structure
struct FeatureFlagValues {
    let zoomControlEnabled: Bool
    
    // We can add more feature flags here later
    // let dynamicMapEnabled: Bool
    // let errorScreensEnabled: Bool
    // etc.
}
